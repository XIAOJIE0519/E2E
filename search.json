[{"path":"https://XIAOJIE0519.github.io/E2E/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 E2E authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/advanced-features.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"4. Advanced Features & Customization","text":"guide covers advanced topics extending E2E framework custom models interpreting model predictions using SHAP.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/advanced-features.html","id":"extending-the-framework-adding-new-models","dir":"Articles","previous_headings":"Advanced Features","what":"1. Extending the Framework: Adding New Models","title":"4. Advanced Features & Customization","text":"E2E framework fully extensible. can register custom models. example, add Adaboost diagnosis:","code":"# 1. Define the model function (must accept X, y, and other standard args) ab_dia <- function(X, y, tune = FALSE, cv_folds = 5) {   # Ensure caret is available   if (!requireNamespace(\"caret\", quietly = TRUE)) {     stop(\"Package 'caret' is required for this custom model.\")   }   ctrl <- caret::trainControl(method = \"cv\", number = cv_folds,                               classProbs = TRUE, summaryFunction = caret::twoClassSummary)   grid <- if (tune) {     expand.grid(iter = c(50, 100), maxdepth = c(1, 2), nu = 0.1)   } else {     expand.grid(iter = 50, maxdepth = 1, nu = 0.1)   }   caret::train(x = X, y = y, method = \"ada\", metric = \"ROC\", trControl = ctrl, tuneGrid = grid) }  # 2. Register the model with a unique name register_model_dia(\"ab\", ab_dia)  # 3. Now you can use \"ab\" in any diagnostic function results_ab <- models_dia(train_dia, model = \"ab\") #> Running model: ab #> Loading required package: ggplot2 #> Loading required package: lattice print_model_summary_dia(\"ab\", results_ab$ab) #>  #> --- ab Model (on Training Data) Metrics --- #> Threshold Strategy: default (0.5000) #> AUROC: 0.9994 (95% CI: 0.9987 - 1.0000) #> AUPRC: 0.9999 #> Accuracy: 0.9919 #> F1: 0.9955 #> Precision: 0.9936 #> Recall: 0.9974 #> Specificity: 0.9375 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/advanced-features.html","id":"model-explanation-with-shap-figure_shap","dir":"Articles","previous_headings":"Advanced Features","what":"2. Model Explanation with SHAP (figure_shap)","title":"4. Advanced Features & Customization","text":"figure_shap function provides model-agnostic explanations calculating SHAP values. reveals features impact model’s output.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/advanced-features.html","id":"explaining-a-diagnostic-model","dir":"Articles","previous_headings":"Advanced Features > 2. Model Explanation with SHAP (figure_shap)","what":"Explaining a Diagnostic Model","title":"4. Advanced Features & Customization","text":"","code":"# First, we need a model result object bagging_xb_results <- bagging_dia(train_dia, base_model_name = \"xb\", n_estimators = 10, seed=123) #> Running Bagging model: Bagging_dia (base: xb)  # Now, generate the SHAP explanation plot (don't save to file in vignette) figure_shap(   data = bagging_xb_results,   raw_data = train_dia,   target_type = \"diagnosis\",   output_file = \"Dia_SHAP_Example\" ) #> Preparing data for SHAP analysis... #> Identified 20 features for SHAP analysis: AC009242.1, AC004637.1, AC246817.1, AL139241.1, PRDM16.DT #> Training 'xgboost' surrogate model and calculating SHAP values... #> Generating SHAP plots... #> SHAP plot successfully saved to: Dia_SHAP_Example.pdf"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/advanced-features.html","id":"explaining-a-prognostic-model","dir":"Articles","previous_headings":"Advanced Features > 2. Model Explanation with SHAP (figure_shap)","what":"Explaining a Prognostic Model","title":"4. Advanced Features & Customization","text":"","code":"# First, we need a model result object stacking_gbm_pro_results <- stacking_pro(   results_all_models = models_pro(train_pro, model = c(\"lasso_pro\", \"rsf_pro\")),   data = train_pro,   meta_model_name = \"gbm_pro\" ) #> Running Stacking model: Stacking_pro (meta: gbm_pro) #> Running model: lasso_pro #> Running model: rsf_pro  # Generate the SHAP explanation plot (don't save to file in vignette) figure_shap(   data = stacking_gbm_pro_results,   raw_data = train_pro,   target_type = \"prognosis\",   output_file = \"Pro_SHAP_Example\" ) #> Preparing data for SHAP analysis... #> Renaming score data frame ID column from 'ID' to 'sample' for merging. #> Identified 28 features for SHAP analysis: LINC01497, LINC01028, AC084212.1, AC104211.1, AL603840.1 #> Training 'xgboost' surrogate model and calculating SHAP values... #> Generating SHAP plots... #> SHAP plot successfully saved to: Pro_SHAP_Example.pdf"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"diagnostic-models-classification","dir":"Articles","previous_headings":"","what":"Diagnostic Models (Classification)","title":"2. Diagnostic Workflow","text":"track dedicated binary classification tasks.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"initialization","dir":"Articles","previous_headings":"Diagnostic Models (Classification)","what":"1. Initialization","title":"2. Diagnostic Workflow","text":"First, initialize diagnostic modeling system. registers built-classification models.","code":"initialize_modeling_system_dia() #> Diagnostic modeling system initialized and default models registered."},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"training-single-models-with-models_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification)","what":"2. Training Single Models with models_dia","title":"2. Diagnostic Workflow","text":"models_dia function gateway training one standard classification models.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"basic-usage","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 2. Training Single Models with models_dia","what":"Basic Usage","title":"2. Diagnostic Workflow","text":"default, models_dia runs registered models. demonstration, ’ll run subset save time.","code":"# To run all, use model = \"all_dia\" or omit the parameter. results_all_dia <- models_dia(train_dia, model = c(\"rf\", \"lasso\", \"xb\")) #> Running model: rf #> Loading required package: ggplot2 #> Loading required package: lattice #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading. #> Running model: lasso #> Running model: xb #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading.  # Print a summary for a specific model (e.g., Random Forest) print_model_summary_dia(\"rf\", results_all_dia$rf) #>  #> --- rf Model (on Training Data) Metrics --- #> Threshold Strategy: default (0.5000) #> AUROC: 1.0000 (95% CI: 1.0000 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 1.0000 #> F1: 1.0000 #> Precision: 1.0000 #> Recall: 1.0000 #> Specificity: 1.0000 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"advanced-usage-customization","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 2. Training Single Models with models_dia","what":"Advanced Usage & Customization","title":"2. Diagnostic Workflow","text":"can precisely control modeling process specifying parameters.","code":"# Run a specific subset of models with tuning enabled and custom thresholds results_dia_custom <- models_dia(   data = train_dia,   model = c(\"rf\", \"lasso\", \"xb\"),   tune = TRUE,   seed = 123,   threshold_choices = list(rf = \"f1\", lasso = 0.6, xb = \"youden\"),   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Case\",   new_negative_label = \"Control\" ) #> Running model: rf #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading. #> Running model: lasso #> Running model: xb #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> [04:11:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading.  # View the custom results print_model_summary_dia(\"rf\", results_dia_custom$rf) #>  #> --- rf Model (on Training Data) Metrics --- #> Threshold Strategy: f1 (0.7180) #> AUROC: 1.0000 (95% CI: 1.0000 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 1.0000 #> F1: 1.0000 #> Precision: 1.0000 #> Recall: 1.0000 #> Specificity: 1.0000 #> --------------------------------------------------"},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"bagging-bagging_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 3. Ensemble Modeling","what":"Bagging (bagging_dia)","title":"2. Diagnostic Workflow","text":"Builds Bagging ensemble training base model multiple bootstrap samples.","code":"# Create a Bagging ensemble with XGBoost as the base model # n_estimators is reduced for faster execution in this example. bagging_xb_results <- bagging_dia(train_dia, base_model_name = \"xb\", n_estimators = 10, seed = 123) #> Running Bagging model: Bagging_dia (base: xb) print_model_summary_dia(\"Bagging (XGBoost)\", bagging_xb_results) #>  #> --- Bagging (XGBoost) Model (on Training Data) Metrics --- #> Ensemble Type: Bagging (Base: xb, Estimators: 10) #> Threshold Strategy: default (0.5000) #> AUROC: 1.0000 (95% CI: 0.9999 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 0.9988 #> F1: 0.9994 #> Precision: 0.9987 #> Recall: 1.0000 #> Specificity: 0.9875 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"voting-voting_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 3. Ensemble Modeling","what":"Voting (voting_dia)","title":"2. Diagnostic Workflow","text":"Combines predictions multiple pre-trained models.","code":"# Create a soft voting ensemble from the top models voting_soft_results <- voting_dia(   results_all_models = results_all_dia,   data = train_dia,   type = \"soft\" ) #> Running Voting model: Voting_dia (type: soft) #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading. print_model_summary_dia(\"Voting (Soft)\", voting_soft_results) #>  #> --- Voting (Soft) Model (on Training Data) Metrics --- #> Ensemble Type: Voting (Type: soft, Weight Metric: AUROC, Base models used: rf, xb, lasso) #> Threshold Strategy: f1 (0.6027) #> AUROC: 1.0000 (95% CI: 1.0000 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 1.0000 #> F1: 1.0000 #> Precision: 1.0000 #> Recall: 1.0000 #> Specificity: 1.0000 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"stacking-stacking_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 3. Ensemble Modeling","what":"Stacking (stacking_dia)","title":"2. Diagnostic Workflow","text":"Uses predictions base models features train final meta-model.","code":"# Create a Stacking ensemble with Lasso as the meta-model stacking_lasso_results <- stacking_dia(   results_all_models = results_all_dia,   data = train_dia,   meta_model_name = \"lasso\" ) #> Running Stacking model: Stacking_dia (meta: lasso) #> Warning in ci.auc.roc(roc_obj, conf.level = 0.95): ci.auc() of a ROC curve with #> AUC == 1 is always 1-1 and can be misleading. print_model_summary_dia(\"Stacking (Lasso)\", stacking_lasso_results) #>  #> --- Stacking (Lasso) Model (on Training Data) Metrics --- #> Ensemble Type: Stacking (Meta: lasso, Base models used: rf, xb, lasso) #> Threshold Strategy: f1 (0.9794) #> AUROC: 1.0000 (95% CI: 1.0000 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 1.0000 #> F1: 1.0000 #> Precision: 1.0000 #> Recall: 1.0000 #> Specificity: 1.0000 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"handling-imbalanced-data-imbalance_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification) > 3. Ensemble Modeling","what":"Handling Imbalanced Data (imbalance_dia)","title":"2. Diagnostic Workflow","text":"Implements EasyEnsemble algorithm.","code":"# Create an EasyEnsemble with XGBoost as the base model # n_estimators is reduced for faster execution. results_imbalance_dia <- imbalance_dia(train_dia, base_model_name = \"xb\", n_estimators = 5, seed = 123) #> Running Imbalance model: EasyEnsemble_dia (base: xb) print_model_summary_dia(\"Imbalance (XGBoost)\", results_imbalance_dia) #>  #> --- Imbalance (XGBoost) Model (on Training Data) Metrics --- #> Ensemble Type: EasyEnsemble (Base: xb, Estimators: 5) #> Threshold Strategy: default (0.5000) #> AUROC: 0.9999 (95% CI: 0.9998 - 1.0000) #> AUPRC: 1.0000 #> Accuracy: 0.9838 #> F1: 0.9910 #> Precision: 1.0000 #> Recall: 0.9821 #> Specificity: 1.0000 #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"applying-models-to-new-data-apply_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification)","what":"4. Applying Models to New Data (apply_dia)","title":"2. Diagnostic Workflow","text":"Use trained model object make predictions new, unseen dataset.","code":"# Apply the trained Bagging model to the test set bagging_pred_new <- apply_dia(   trained_model_object = bagging_xb_results$model_object,   new_data = test_dia,   label_col_name = \"outcome\",   pos_class = \"Positive\",   neg_class = \"Negative\" ) #> Applying model to new data...  # Evaluate these new predictions eval_results_new <- evaluate_model_dia(   precomputed_prob = bagging_pred_new$score,   y_data = factor(test_dia$outcome, levels = c(0, 1), labels = c(\"Positive\", \"Negative\")),   sample_ids = test_dia$sample,   threshold_strategy = \"default\",   pos_class = \"Positive\",   neg_class = \"Negative\" ) print(eval_results_new$evaluation_metrics) #> $Threshold_Strategy #> [1] \"default\" #>  #> $Final_Threshold #> [1] 0.5 #>  #> $Accuracy #>   Accuracy  #> 0.01358696  #>  #> $Precision #>   Precision  #> 0.008928571  #>  #> $Recall #>     Recall  #> 0.09090909  #>  #> $F1 #>         F1  #> 0.01626016  #>  #> $Specificity #> Specificity  #> 0.005970149  #>  #> $AUROC #> Area under the curve: 0.9983 #>  #> $AUROC_95CI_Lower #> [1] 0.9960738 #>  #> $AUROC_95CI_Upper #> [1] 1 #>  #> $AUPRC #> [1] 0.04624892"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/diagnostic-workflow.html","id":"visualization-figure_dia","dir":"Articles","previous_headings":"Diagnostic Models (Classification)","what":"5. Visualization (figure_dia)","title":"2. Diagnostic Workflow","text":"Generate high-quality plots evaluate model performance.","code":"# ROC Curve (don't save to file in vignette) figure_dia(type = \"roc\", data = results_imbalance_dia, output_file = \"Diagnostic_ROC\", output_type = \"pdf\") #> 'roc' plot saved to: Diagnostic_ROC.pdf  # Precision-Recall Curve figure_dia(type = \"prc\", data = results_imbalance_dia, output_file = \"Diagnostic_PRC\", output_type = \"png\") #> 'prc' plot saved to: Diagnostic_PRC.png  # Confusion Matrix figure_dia(type = \"matrix\", data = results_imbalance_dia, output_file = \"Diagnostic_Matrix\", output_type = \"pdf\") #> 'matrix' plot saved to: Diagnostic_Matrix.pdf"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/getting-started.html","id":"e2e-an-r-package-for-easy-to-build-ensemble-models","dir":"Articles","previous_headings":"","what":"E2E: An R Package for Easy-to-Build Ensemble Models","title":"1. Getting Started","text":"E2E comprehensive R package designed streamline development, evaluation, interpretation machine learning models diagnostic (classification) prognostic (survival analysis) tasks. provides robust, extensible framework training individual models building powerful ensembles—including Bagging, Voting, Stacking—minimal code. package also includes integrated tools visualization model explanation via SHAP values. Author: Shanjie Luan (ORCID: 0009-0002-8569-8526) Citation: use E2E research, please cite : “Shanjie Luan (2025). E2E: R Package Easy--Build Ensemble Models. https://github.com/XIAOJIE0519/E2E” Note: article process written/submitted undergoing review CRAN revisions. questions, please contact Luan20050519@163.com.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"E2E: An R Package for Easy-to-Build Ensemble Models","what":"Installation","title":"1. Getting Started","text":"development version E2E can installed directly GitHub using devtools remotes. installation, load package R session:","code":"# If you don't have devtools, install it first: # install.packages(\"devtools\") devtools::install_github(\"XIAOJIE0519/E2E\") # If you don't have remotes, install it first: # install.packages(\"remotes\") remotes::install_github(\"XIAOJIE0519/E2E\") library(E2E)"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/getting-started.html","id":"core-concepts","dir":"Articles","previous_headings":"E2E: An R Package for Easy-to-Build Ensemble Models","what":"Core Concepts","title":"1. Getting Started","text":"E2E operates two parallel tracks: Diagnostic Models Prognostic Models. using functions either track, must initialize corresponding system. step registers suite pre-defined, commonly used models.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/getting-started.html","id":"sample-data","dir":"Articles","previous_headings":"E2E: An R Package for Easy-to-Build Ensemble Models > Core Concepts","what":"Sample Data","title":"1. Getting Started","text":"follow examples, ’ll need sample data files. four data frames included package try: train_dia, test_dia, train_pro, test_pro. train_dia test_dia diagnosis, column names sample, outcome, variable 1, 2, 3. train_pro test_pro prognosis, column names sample, outcome, time, variable 1, 2, 3.","code":"head(train_dia) #>                         sample outcome AC009242.1 AC004637.1 AC246817.1 #> 1 TCGA-BH-A201-01A-11R-A14M-07       1     0.3988     1.3971     0.6180 #> 2 TCGA-C8-A12P-01A-11R-A115-07       1     0.0220     0.0000     0.0916 #> 3 TCGA-BH-A0W3-01A-11R-A109-07       1     0.0367     0.0000     0.0509 #> 4 TCGA-BH-A0H6-01A-21R-A056-07       1     0.1338     0.1563     0.0619 #> 5 TCGA-D8-A27V-01A-12R-A17B-07       1     0.1299     0.5056     0.0134 #> 6 TCGA-D8-A27M-01A-11R-A16F-07       1     0.1722     8.4883     0.2478 #>   AL139241.1 PRDM16.DT LINC01028 LINC00639 AL135841.1  HYMAI KCNIP2.AS1 #> 1     0.1441    0.2706    0.0000    0.2019     0.4235 0.0000     0.2728 #> 2     0.0530    0.0221    0.0000    0.0393     0.0000 0.0000     0.0502 #> 3     0.0883    0.0921    0.0000    0.2729     0.0000 0.0000     0.2508 #> 4     0.0000    0.2555    0.0000    0.0558     0.0000 0.0000     0.3662 #> 5     0.6259    0.1378    0.0349    0.2062     0.2299 0.0849     0.4279 #> 6     2.6272    0.1730    0.0926    0.4101     0.4063 0.0483     0.3490 #>   LINC00922 LINC01614 LINC01644 AC104237.3 AC016735.1 AC090125.1 AC008459.1 #> 1    0.8689   48.5811    4.1185     0.6571     4.9722     1.7074     0.5958 #> 2    1.6513   33.5412    0.0000     0.0000     0.0000     0.5024     0.0000 #> 3    2.3520   12.8974    0.1893     0.0000     0.0000     0.4186     0.0498 #> 4    1.8789   86.9410    0.0000     0.0000     0.0000     1.0694     0.0000 #> 5    0.6987   14.7284    3.5769     0.0951     1.1995     0.0824     0.0196 #> 6    0.9262   78.2584    0.0494     0.0000     6.3601     0.8736     0.0000 #>   LINC00958 AC112721.2 LINC00924 #> 1    8.5194     2.4894    0.3138 #> 2    0.3649     2.2892    0.1656 #> 3    0.2146     0.5722    0.1003 #> 4    0.0392     3.7589    0.2381 #> 5    0.8306     0.9759    0.4740 #> 6    0.1493     9.6523    0.1571 head(train_pro) #>                         sample outcome time LINC01497 LINC01028 AC084212.1 #> 1 TCGA-AC-A7VC-01A-11R-A352-07       0    1    0.0000         0     0.0000 #> 2 TCGA-C8-A275-01A-21R-A16F-07       0    1    0.0000         0     0.0000 #> 3 TCGA-C8-A1HJ-01A-11R-A13Q-07       0    5    0.1135         0     0.0298 #> 4 TCGA-PL-A8LX-01A-11R-A41B-07       0    5    0.0000         0     0.0000 #> 5 TCGA-AN-A041-01A-11R-A034-07       0    7    0.0000         0     0.0000 #> 6 TCGA-PL-A8LY-01A-11R-A41B-07       0    8    0.1910         0     0.0000 #>   AC104211.1 AL603840.1 AL590434.1 AC110772.2 LINC01614 C9orf163 AL391845.2 #> 1     0.4532     0.1294     0.0000     0.3130  224.7098   0.1968     1.1866 #> 2     0.0168     0.0000     0.0498     0.0000   25.0775   1.3142     0.4553 #> 3     0.0543     0.4426     0.0603     0.4218   11.4685   0.4421     0.2389 #> 4     0.5331     0.0000     0.0000     0.0000    4.8058   2.4996     2.9862 #> 5     0.3376     0.0000     0.0000     0.0343   77.7571   0.7764     1.7484 #> 6     0.1218     0.5118     0.9477     0.0526    0.0000   0.8931     0.0000 #>    HYMAI LINC01152 AL133467.1 LINC00165 LINC02408 AC092118.1 AP000851.2 #> 1 0.4287    0.4054     0.4250    0.1024    0.2572     0.0000     0.2342 #> 2 0.0421    0.0902     1.4662    0.1140    0.3021     0.0444     0.0651 #> 3 0.8610   33.7458     0.6109    0.0000    0.0642     0.2690     1.3673 #> 4 0.0000    0.7154     0.6136    0.0822    0.0458     0.0961     0.0000 #> 5 0.0166    0.1599     0.1118    0.0673    2.1791     0.0262     1.2314 #> 6 0.1780    3.3316     0.1714    0.9296    0.0000     0.8857     6.3743 #>   AC105046.1 LINC01929 AP001434.1 AC105219.1 AC133644.1 FAM153CP AC093515.1 #> 1     1.5372    0.7004     7.6471     0.0000     0.1563   0.0099     0.0000 #> 2     0.0940    1.7320     2.7820     0.1571     2.3483   0.1389     0.0526 #> 3     0.7133    0.3030     1.5853     0.0000     1.4043   0.0074     0.0000 #> 4     0.0135    0.2497     0.2359     0.4528     0.0000   0.1502     0.0253 #> 5     0.0222    1.1255     0.9668     0.1856     0.6166   2.6236     0.9121 #> 6     0.4428    0.0262     0.0000     0.2846     0.0000   0.0331     0.0636 #>   AC004990.1  HOTAIR AC055854.1 SIRLNT #> 1     0.9918 11.2572     0.1926 0.0000 #> 2     0.0409  9.1333    10.0963 0.0714 #> 3     0.4125  4.0364     1.1249 0.0576 #> 4     0.0295  0.1821     0.0927 0.0343 #> 5     0.0000  0.1066     1.2157 0.0000 #> 6     0.0000  1.6027     0.9711 0.0000"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"prognostic-models-survival-analysis","dir":"Articles","previous_headings":"","what":"Prognostic Models (Survival Analysis)","title":"3. Prognostic Workflow","text":"track dedicated survival prediction tasks.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"initialization","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis)","what":"1. Initialization","title":"3. Prognostic Workflow","text":"First, initialize prognostic modeling system.","code":"initialize_modeling_system_pro() #> Prognosis modeling system initialized and default models registered."},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"training-single-models-with-models_pro","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis)","what":"2. Training Single Models with models_pro","title":"3. Prognostic Workflow","text":"models_pro function trains one standard survival models. demonstration, ’ll run subset.","code":"# Run a subset of available prognostic models results_all_pro <- models_pro(train_pro, model = c(\"lasso_pro\", \"rsf_pro\")) #> Running model: lasso_pro #> Running model: rsf_pro  # Print summary for Random Survival Forest print_model_summary_pro(\"rsf_pro\", results_all_pro$rsf_pro) #>  #> --- rsf_pro Prognosis Model (on Training Data) Metrics --- #> C-index: 0.1028 #> Time-dependent AUROC (years 1, 3, 5): 0.3511, 0.2744, 0.3083 #> Average Time-dependent AUROC: 0.3113 #> KM Group HR (High vs Low): 0.0749 (p-value: 3.894e-15, Cutoff: 1120.1938) #> --------------------------------------------------"},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"bagging-bagging_pro","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis) > 3. Ensemble Modeling","what":"Bagging (bagging_pro)","title":"3. Prognostic Workflow","text":"Builds Bagging ensemble survival models.","code":"# Create a Bagging ensemble with GBM as the base survival model # n_estimators is reduced for faster execution. bagging_gbm_pro_results <- bagging_pro(train_pro, base_model_name = \"gbm_pro\", n_estimators = 5, seed = 123) #> Running Bagging model: Bagging_pro (base: gbm_pro) print_model_summary_pro(\"Bagging (GBM)\", bagging_gbm_pro_results) #>  #> --- Bagging (GBM) Prognosis Model (on Training Data) Metrics --- #> Ensemble Type: Bagging (Base: gbm_pro, Estimators: 5) #> C-index: 0.8766 #> Time-dependent AUROC (years 1, 3, 5): 0.7535, 0.8088, 0.8101 #> Average Time-dependent AUROC: 0.7908 #> KM Group HR (High vs Low): 13.9828 (p-value: 3.342e-17, Cutoff: -4.2321) #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"stacking-stacking_pro","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis) > 3. Ensemble Modeling","what":"Stacking (stacking_pro)","title":"3. Prognostic Workflow","text":"Builds Stacking ensemble survival models.","code":"# Create a Stacking ensemble with GBM as the meta-model stacking_gbm_pro_results <- stacking_pro(   results_all_models = results_all_pro,   data = train_pro,   meta_model_name = \"gbm_pro\" ) #> Running Stacking model: Stacking_pro (meta: gbm_pro) print_model_summary_pro(\"Stacking (GBM)\", stacking_gbm_pro_results) #>  #> --- Stacking (GBM) Prognosis Model (on Training Data) Metrics --- #> Ensemble Type: Stacking (Meta: gbm_pro, Base models used: lasso_pro, rsf_pro) #> C-index: 0.9460 #> Time-dependent AUROC (years 1, 3, 5): 0.9117, 0.8733, 0.8643 #> Average Time-dependent AUROC: 0.8831 #> KM Group HR (High vs Low): 69.2328 (p-value: 1.145e-20, Cutoff: 0.0436) #> --------------------------------------------------"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"applying-models-to-new-data-apply_pro","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis)","what":"4. Applying Models to New Data (apply_pro)","title":"3. Prognostic Workflow","text":"Generate prognostic scores new dataset.","code":"# Apply the trained stacking model to the test set pro_pred_new <- apply_pro(   trained_model_object = stacking_gbm_pro_results$model_object,   new_data = test_pro,   time_unit = \"day\" ) #> Applying model on new data... #> Warning in evaluate_model_pro(trained_model_obj = trained_model_object, : #> Trained model object does not contain 'X_train_cols'. Prediction might fail if #> feature order/set is different.  # Evaluate the new prognostic scores eval_pro_new <- evaluate_model_pro(   precomputed_score = pro_pred_new$score,   Y_surv_obj = survival::Surv(time = test_pro$time, event = test_pro$outcome),   sample_ids = test_pro$sample,   years_to_evaluate = c(1, 3, 5) ) print(eval_pro_new$evaluation_metrics) #> $C_index #> [1] 0.5840969 #>  #> $AUROC_Years #> $AUROC_Years$`1` #> [1] 0.4655841 #>  #> $AUROC_Years$`3` #> [1] 0.5852284 #>  #> $AUROC_Years$`5` #> [1] 0.5627304 #>  #>  #> $AUROC_Average #> [1] 0.5378477 #>  #> $KM_HR #> [1] 1.849412 #>  #> $KM_P_value #> [1] 0.04612042 #>  #> $KM_Cutoff #> [1] -0.4979203"},{"path":"https://XIAOJIE0519.github.io/E2E/articles/prognostic-workflow.html","id":"visualization-figure_pro","dir":"Articles","previous_headings":"Prognostic Models (Survival Analysis)","what":"5. Visualization (figure_pro)","title":"3. Prognostic Workflow","text":"Generate Kaplan-Meier (KM) time-dependent ROC (tdROC) curves.","code":"# Kaplan-Meier Curve (don't save to file in vignette) figure_pro(type = \"km\", data = stacking_gbm_pro_results, time_unit= \"days\", output_file = \"Prognostic_KM\",            output_type = \"pdf\") #> 'km' plot saved successfully to: Prognostic_KM.pdf  # Time-Dependent ROC Curve figure_pro(type = \"tdroc\", data = stacking_gbm_pro_results, time_unit = \"days\", output_file = \"Prognostic_TDROC\", output_type = \"pdf\") #> 'tdroc' plot saved successfully to: Prognostic_TDROC.pdf"},{"path":"https://XIAOJIE0519.github.io/E2E/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shanjie Luan. Author, maintainer.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Luan S (2025). E2E: Ensemble Learning Framework Diagnostic Prognostic Modeling. R package version 0.0.2, https://XIAOJIE0519.github.io/E2E.","code":"@Manual{,   title = {E2E: Ensemble Learning Framework for Diagnostic and Prognostic Modeling},   author = {Shanjie Luan},   year = {2025},   note = {R package version 0.0.2},   url = {https://XIAOJIE0519.github.io/E2E}, }"},{"path":"https://XIAOJIE0519.github.io/E2E/index.html","id":"e2e-an-r-package-for-easy-to-build-ensemble-models","dir":"","previous_headings":"","what":"Ensemble Learning Framework for Diagnostic and Prognostic Modeling","title":"Ensemble Learning Framework for Diagnostic and Prognostic Modeling","text":"E2E comprehensive R package designed streamline development, evaluation, interpretation machine learning models diagnostic (classification) prognostic (survival analysis) tasks. provides robust, extensible framework training individual models building powerful ensembles—including Bagging, Voting, Stacking—minimal code. package also includes integrated tools visualization model explanation via SHAP values. Author: Shanjie Luan (ORCID: 0009-0002-8569-8526, First Corresponding Author), Ximing Wang Citation: use E2E research, please cite : “Shanjie Luan (2025). E2E: R Package Easy--Build Ensemble Models. https://github.com/XIAOJIE0519/E2E” Note: article process written/submitted undergoing review CRAN revisions. questions, please contact Luan20050519@163.com.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Ensemble Learning Framework for Diagnostic and Prognostic Modeling","text":"complete documentation, tutorials, function references, please visit pkgdown website: https://XIAOJIE0519.github.io/E2E/","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ensemble Learning Framework for Diagnostic and Prognostic Modeling","text":"development version E2E can installed directly GitHub using remotes. installation, load package R session:","code":"# If you don't have remotes, install it first: # install.packages(\"remotes\") remotes::install_github(\"XIAOJIE0519/E2E\") library(E2E)"},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Trained Diagnostic Model to New Data — apply_dia","title":"Apply a Trained Diagnostic Model to New Data — apply_dia","text":"Applies previously trained model (ensemble) new, unseen dataset generate predicted probabilities.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Trained Diagnostic Model to New Data — apply_dia","text":"","code":"apply_dia(   trained_model_object,   new_data,   label_col_name = NULL,   pos_class,   neg_class )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Trained Diagnostic Model to New Data — apply_dia","text":"trained_model_object trained model object, returned models_dia, bagging_dia, stacking_dia, voting_dia, imbalance_dia. new_data data frame containing new data prediction. first column must sample ID, subsequent columns features. label_col_name character string, name column containing class labels new data. optional used include true labels output; used prediction. pos_class character string, label positive class (must match label used training). neg_class character string, label negative class (must match label used training).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Trained Diagnostic Model to New Data — apply_dia","text":"data frame sample (ID), label (original numeric label new data, NA provided), score (predicted probability positive class).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Trained Diagnostic Model to New Data — apply_dia","text":"","code":"if (FALSE) { # \\dontrun{ # 1. Assume 'train_dia' and 'test_dia' are loaded from your package # data(train_dia) # data(test_dia) # test_dia has same structure, maybe without the label column initialize_modeling_system_dia()  # 2. Train a model train_results <- models_dia(   data = train_dia, model = \"lasso\",   new_positive_label = \"Case\", new_negative_label = \"Control\" ) trained_lasso_model <- train_results$lasso$model_object  # 3. Apply the trained model to new data new_predictions <- apply_dia(   trained_model_object = trained_lasso_model,   new_data = test_dia,   label_col_name = \"Disease_Status\", # Optional   pos_class = \"Case\",   neg_class = \"Control\" ) utils::head(new_predictions) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Trained Prognostic Model to New Data — apply_pro","title":"Apply a Trained Prognostic Model to New Data — apply_pro","text":"Applies previously trained prognostic model (ensemble) new, unseen dataset generate prognostic scores.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Trained Prognostic Model to New Data — apply_pro","text":"","code":"apply_pro(trained_model_object, new_data, time_unit = \"day\")"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Trained Prognostic Model to New Data — apply_pro","text":"trained_model_object trained model object, returned models_pro, bagging_pro, stacking_pro. new_data data frame containing new data prediction. follow structure training data: ID, Outcome, Time, Features. outcome time columns used data preparation can included output, model's prediction uses features. outcome/time unknown, can filled NA. time_unit character string, unit time third column new_data.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Trained Prognostic Model to New Data — apply_pro","text":"data frame ID, outcome, time, predicted score new data.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/apply_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Trained Prognostic Model to New Data — apply_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_pro', 'test_pro' are loaded and 'trained_lasso_model' exists # data(train_pro) # data(test_pro) # initialize_modeling_system_pro() # train_results <- models_pro(data = train_pro, model = \"lasso_pro\") # trained_lasso_model <- train_results$lasso_pro$model_object  # Apply the trained model to new data new_data_predictions <- apply_pro(   trained_model_object = trained_lasso_model,   new_data = test_pro,   time_unit = \"day\" # Specify time unit of test_pro ) utils::head(new_data_predictions) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Bagging Diagnostic Model — bagging_dia","title":"Train a Bagging Diagnostic Model — bagging_dia","text":"Implements Bagging (Bootstrap Aggregating) ensemble diagnostic models. trains multiple base models bootstrapped samples training data aggregates predictions averaging probabilities.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Bagging Diagnostic Model — bagging_dia","text":"","code":"bagging_dia(   data,   base_model_name,   n_estimators = 50,   subset_fraction = 0.632,   tune_base_model = FALSE,   threshold_strategy = \"default\",   specific_threshold_value = 0.5,   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\",   seed = 456 )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Bagging Diagnostic Model — bagging_dia","text":"data data frame first column sample ID, second outcome label, subsequent columns features. base_model_name character string, name base diagnostic model use (e.g., \"rf\", \"lasso\"). model must registered. n_estimators integer, number base models train. subset_fraction numeric value 0 1, fraction samples bootstrap base model. tune_base_model Logical, whether enable tuning base model. threshold_strategy character string (e.g., \"f1\", \"youden\", \"default\") numeric value (0-1) determining evaluation threshold ensemble. specific_threshold_value numeric value 0 1. used threshold_strategy \"numeric\". positive_label_value numeric character value raw data representing positive class. negative_label_value numeric character value raw data representing negative class. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\"). seed integer, reproducibility.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Bagging Diagnostic Model — bagging_dia","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Bagging Diagnostic Model — bagging_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_dia' is a data frame loaded from your package # data(train_dia) initialize_modeling_system_dia()  bagging_rf_results <- bagging_dia(   data = train_dia,   base_model_name = \"rf\",   n_estimators = 5,   threshold_strategy = \"youden\",   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Case\",   new_negative_label = \"Control\" ) print_model_summary_dia(\"Bagging (RF)\", bagging_rf_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Bagging Prognostic Model — bagging_pro","title":"Train a Bagging Prognostic Model — bagging_pro","text":"Implements Bagging (Bootstrap Aggregating) ensemble prognostic models. trains multiple base models bootstrapped samples training data aggregates predictions.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Bagging Prognostic Model — bagging_pro","text":"","code":"bagging_pro(   data,   base_model_name,   n_estimators = 10,   subset_fraction = 0.632,   tune_base_model = FALSE,   time_unit = \"day\",   years_to_evaluate = c(1, 3, 5),   seed = 456 )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Bagging Prognostic Model — bagging_pro","text":"data data frame training. first column must sample ID, second column event status (0/1), third column time, subsequent columns features. base_model_name character string, name base prognostic model use (e.g., \"lasso_pro\", \"rsf_pro\"). model must registered. n_estimators integer, number base models train. subset_fraction numeric value 0 1, fraction samples bootstrap base model. tune_base_model Logical, whether enable tuning base model. time_unit character string, unit time third column data. years_to_evaluate numeric vector specific years calculate time-dependent AUROC evaluation. seed integer, reproducibility.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Bagging Prognostic Model — bagging_pro","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/bagging_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Bagging Prognostic Model — bagging_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_pro' is a data frame loaded from your package # data(train_pro) initialize_modeling_system_pro()  bagging_lasso_results <- bagging_pro(   data = train_pro,   base_model_name = \"lasso_pro\",   n_estimators = 5, # Small number for example speed   subset_fraction = 0.8,   years_to_evaluate = c(1, 3) ) print_model_summary_pro(\"Bagging (Lasso)\", bagging_lasso_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/calculate_metrics_at_threshold_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","title":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","text":"Calculates various classification performance metrics (Accuracy, Precision, Recall, F1-score, Specificity, True Positives, etc.) binary classification given probability threshold.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/calculate_metrics_at_threshold_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","text":"","code":"calculate_metrics_at_threshold_dia(   prob_positive,   y_true,   threshold,   pos_class,   neg_class )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/calculate_metrics_at_threshold_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","text":"prob_positive numeric vector predicted probabilities positive class. y_true factor vector true class labels. threshold numeric value 0 1, probability threshold prediction considered positive. pos_class character string, label positive class. neg_class character string, label negative class.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/calculate_metrics_at_threshold_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","text":"list containing: Threshold: threshold used. Accuracy: Overall prediction accuracy. Precision: Precision positive class. Recall: Recall (Sensitivity) positive class. F1: F1-score positive class. Specificity: Specificity negative class. TP, TN, FP, FN, N: Counts True Positives, True Negatives, False Positives, False Negatives, total samples.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/calculate_metrics_at_threshold_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Classification Metrics at a Specific Threshold — calculate_metrics_at_threshold_dia","text":"","code":"y_true_ex <- factor(c(\"Negative\", \"Positive\", \"Positive\", \"Negative\", \"Positive\"),                     levels = c(\"Negative\", \"Positive\")) prob_ex <- c(0.1, 0.8, 0.6, 0.3, 0.9) metrics <- calculate_metrics_at_threshold_dia(   prob_positive = prob_ex,   y_true = y_true_ex,   threshold = 0.5,   pos_class = \"Positive\",   neg_class = \"Negative\" ) print(metrics) #> $Threshold #> [1] 0.5 #>  #> $Accuracy #> Accuracy  #>        1  #>  #> $Precision #> Precision  #>         1  #>  #> $Recall #> Recall  #>      1  #>  #> $F1 #> F1  #>  1  #>  #> $Specificity #> Specificity  #>           1  #>  #> $TP #> [1] 3 #>  #> $TN #> [1] 2 #>  #> $FP #> [1] 0 #>  #> $FN #> [1] 0 #>  #> $N #> [1] 5 #>"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/dt_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Decision Tree Model for Classification — dt_dia","title":"Train a Decision Tree Model for Classification — dt_dia","text":"Trains single Decision Tree model using caret::train (via rpart method) binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/dt_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Decision Tree Model for Classification — dt_dia","text":"","code":"dt_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/dt_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Decision Tree Model for Classification — dt_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning cp (complexity parameter) (TRUE) use fixed value (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/dt_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Decision Tree Model for Classification — dt_dia","text":"caret::train object representing trained Decision Tree model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/dt_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Decision Tree Model for Classification — dt_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # dt_model <- dt_dia(prepared_data$X, prepared_data$y) # print(dt_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","title":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","text":"Trains Elastic Net-regularized logistic regression model using caret::train (via glmnet method) binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","text":"","code":"en_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning lambda (TRUE) use fixed value (FALSE). alpha fixed 0.5 Elastic Net. cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","text":"caret::train object representing trained Elastic Net model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an Elastic Net (L1 and L2 Regularized Logistic Regression) Model for Classification — en_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # en_model <- en_dia(prepared_data$X, prepared_data$y) # print(en_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","title":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","text":"Trains Cox proportional hazards model Elastic Net regularization using glmnet (alpha = 0.5).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","text":"","code":"en_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform hyperparameter tuning (currently simplified/ignored direct cv.glmnet usage inherently tunes lambda).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","text":"list class \"train\" containing trained glmnet model object, names features used training, model type. returned object also includes fitted_scores (linear predictor), y_surv, best_lambda, alpha_val.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/en_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an Elastic Net Cox Proportional Hazards Model — en_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # en_model <- en_pro(prepared_data$X, prepared_data$Y_surv) # print(en_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Diagnostic Model Performance — evaluate_model_dia","title":"Evaluate Diagnostic Model Performance — evaluate_model_dia","text":"Evaluates performance trained diagnostic model using various metrics relevant binary classification, including AUROC, AUPRC, metrics optimal specified probability threshold.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Diagnostic Model Performance — evaluate_model_dia","text":"","code":"evaluate_model_dia(   model_obj = NULL,   X_data = NULL,   y_data,   sample_ids,   threshold_strategy = c(\"default\", \"f1\", \"youden\", \"numeric\"),   specific_threshold_value = 0.5,   pos_class,   neg_class,   precomputed_prob = NULL,   y_original_numeric = NULL )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Diagnostic Model Performance — evaluate_model_dia","text":"model_obj trained model object (typically caret::train object list ensemble like Bagging). Can NULL precomputed_prob provided. X_data data frame features corresponding data used evaluation. Required model_obj provided precomputed_prob NULL. y_data factor vector true class labels evaluation data. sample_ids vector sample IDs evaluation data. threshold_strategy character string, defining determine threshold class-specific metrics: \"default\" (0.5), \"f1\" (maximizes F1-score), \"youden\" (maximizes Youden's J statistic), \"numeric\" (uses specific_threshold_value). specific_threshold_value numeric value 0 1. used threshold_strategy \"numeric\". pos_class character string, label positive class. neg_class character string, label negative class. precomputed_prob Optional. numeric vector precomputed probabilities positive class. provided, model_obj X_data used score derivation. y_original_numeric Optional. original numeric/character vector labels. provided, inferred y_data using global pos_label_value neg_label_value.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Diagnostic Model Performance — evaluate_model_dia","text":"list containing: sample_score: data frame sample (ID), label (original numeric), score (predicted probability positive class). evaluation_metrics: list performance metrics: Threshold_Strategy: strategy used threshold selection. Final_Threshold: chosen probability threshold. Accuracy, Precision, Recall, F1, Specificity: Metrics calculated Final_Threshold. AUROC: Area Receiver Operating Characteristic curve. AUROC_95CI_Lower, AUROC_95CI_Upper: 95% confidence interval AUROC. AUPRC: Area Precision-Recall curve.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Diagnostic Model Performance — evaluate_model_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # And a trained model, e.g., rf_model <- rf_dia(prepared_data$X, prepared_data$y) # # Evaluate the model using F1-score optimal threshold # eval_results <- evaluate_model_dia( #   model_obj = rf_model, #   X_data = prepared_data$X, #   y_data = prepared_data$y, #   sample_ids = prepared_data$sample_ids, #   threshold_strategy = \"f1\", #   pos_class = \"Case\", #   neg_class = \"Control\" # ) # str(eval_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Prognostic Model Performance — evaluate_model_pro","title":"Evaluate Prognostic Model Performance — evaluate_model_pro","text":"Evaluates performance trained prognostic model using various metrics relevant survival analysis, including C-index, time-dependent AUROC, Kaplan-Meier (KM) group analysis (Hazard Ratio p-value).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Prognostic Model Performance — evaluate_model_pro","text":"","code":"evaluate_model_pro(   trained_model_obj = NULL,   X_data = NULL,   Y_surv_obj,   sample_ids,   years_to_evaluate = c(1, 3, 5),   precomputed_score = NULL,   meta_normalize_params = NULL )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Prognostic Model Performance — evaluate_model_pro","text":"trained_model_obj trained model object (class \"train\" returned model training functions like lasso_pro, rsf_pro, etc.). Can NULL precomputed_score provided. X_data data frame features corresponding data used evaluation. Required trained_model_obj provided precomputed_score NULL. Y_surv_obj survival::Surv object evaluation data. sample_ids vector sample IDs evaluation data. years_to_evaluate numeric vector specific years calculate time-dependent AUROC. precomputed_score Optional. numeric vector precomputed prognostic scores samples. provided, trained_model_obj X_data strictly necessary score derivation. meta_normalize_params Optional. list normalization parameters (min/max values) used base model scores stacking ensemble. Used trained_model_obj stacking model ensure consistent normalization prediction.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Prognostic Model Performance — evaluate_model_pro","text":"list containing: sample_score: data frame ID, outcome, time, score columns. evaluation_metrics: list performance metrics: C_index: Harrell's C-index. AUROC_Years: named list time-dependent AUROC values specified years. AUROC_Average: average time-dependent AUROC values. KM_HR: Hazard Ratio High vs Low risk groups (split median score). KM_P_value: P-value KM group comparison. KM_Cutoff: score cutoff used define High/Low risk groups (median score).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/evaluate_model_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Prognostic Model Performance — evaluate_model_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # And a trained model, e.g., lasso_model <- lasso_pro(prepared_data$X, prepared_data$Y_surv) # # Evaluate the model # eval_results <- evaluate_model_pro( #   trained_model_obj = lasso_model, #   X_data = prepared_data$X, #   Y_surv_obj = prepared_data$Y_surv, #   sample_ids = prepared_data$sample_ids, #   years_to_evaluate = c(1, 2, 3) # ) # str(eval_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Diagnostic Model Evaluation Figures — figure_dia","title":"Plot Diagnostic Model Evaluation Figures — figure_dia","text":"Generates Receiver Operating Characteristic (ROC) curves, Precision-Recall (PRC) curves, confusion matrices based diagnostic model evaluation results.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Diagnostic Model Evaluation Figures — figure_dia","text":"","code":"figure_dia(type, data, output_file, output_type = \"pdf\")"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Diagnostic Model Evaluation Figures — figure_dia","text":"type String, specifies type plot generate. Options \"roc\" (ROC curve), \"prc\" (Precision-Recall curve), \"matrix\" (Confusion Matrix). data list object containing model evaluation results. must include: sample_score: data frame least \"ID\", \"label\" (0/1), \"score\" columns. evaluation_metrics: list \"Final_Threshold\" \"_Threshold\" value. output_file String, base name output file (without extension). output_type String, desired output file format. Options: \"pdf\", \"png\", \"svg\". Defaults \"pdf\".","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Diagnostic Model Evaluation Figures — figure_dia","text":"NULL. function saves generated plot directly file.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Diagnostic Model Evaluation Figures — figure_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Example data structure for diagnostic model evaluation results: external_eval_example_dia <- list(   sample_score = data.frame(     ID = paste0(\"S\", 1:100),     label = sample(c(0, 1), 100, replace = TRUE),     score = runif(100, 0, 1)   ),   evaluation_metrics = list(     Final_Threshold = 0.53,     AUROC = 0.75,     AUPRC = 0.68   ) )  # Plot ROC curve figure_dia(type = \"roc\", data = external_eval_example_dia,            output_file = \"Diagnostic_Model_ROC\", output_type = \"png\")  # Plot PRC curve figure_dia(type = \"prc\", data = external_eval_example_dia,            output_file = \"Diagnostic_Model_PRC\", output_type = \"png\")  # Plot Confusion Matrix figure_dia(type = \"matrix\", data = external_eval_example_dia,            output_file = \"Diagnostic_Model_Matrix\", output_type = \"png\") } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Prognostic Model Evaluation Figures — figure_pro","title":"Plot Prognostic Model Evaluation Figures — figure_pro","text":"Generates Kaplan-Meier (KM) survival curves time-dependent ROC curves based prognostic model evaluation results. version uses 'timeROC' package robust efficient tdROC calculations.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Prognostic Model Evaluation Figures — figure_pro","text":"","code":"figure_pro(type, data, output_file, output_type = \"pdf\", time_unit = \"days\")"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Prognostic Model Evaluation Figures — figure_pro","text":"type String, specifies type plot generate. Options \"km\" (Kaplan-Meier curve) \"tdroc\" (Time-Dependent ROC curve). \"tdroc\", multiple ROC curves specified time points overlaid single plot. data list object containing model evaluation results. must include: sample_score: data frame least \"ID\", \"time\", \"outcome\" (0/1), \"score\" columns. evaluation_metrics: list \"KM_Cutoff\" value KM plots, \"AUROC_Years\" (numeric vector list evaluation years) tdROC plots. output_file String, base name output file (without extension). output_type String, desired output file format. Options: \"pdf\", \"png\", \"svg\". Defaults \"pdf\". time_unit String, specifies unit time time column sample_score (e.g., \"days\", \"months\", \"years\"). crucial correctly calculating tdROC. Defaults \"days\".","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Prognostic Model Evaluation Figures — figure_pro","text":"NULL. function saves generated plot directly file.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Prognostic Model Evaluation Figures — figure_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Ensure required packages are installed # install.packages(c(\"survival\", \"survminer\", \"timeROC\", \"ggplot2\", \"Cairo\"))  # Example data structure for prognostic model evaluation results: set.seed(42) external_eval_example_pro <- list(   sample_score = data.frame(     ID = paste0(\"S\", 1:200),     time = runif(200, 10, 1825), # time in days     outcome = sample(c(0, 1), 200, replace = TRUE, prob = c(0.7, 0.3)),     score = runif(200, 0, 1)   ),   evaluation_metrics = list(     KM_Cutoff = 0.5,     AUROC_Years = c(1, 3, 5) # Evaluation years   ) )  # Plot Kaplan-Meier curve figure_pro(type = \"km\", data = external_eval_example_pro,            output_file = \"Prognostic_Model_KM\", output_type = \"png\",            time_unit = \"days\")  # Plot Time-Dependent ROC curves (1-year, 3-year, 5-year overlaid) figure_pro(type = \"tdroc\", data = external_eval_example_pro,            output_file = \"Prognostic_Model_TDROC\", output_type = \"png\",            time_unit = \"days\") } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_shap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Plot SHAP Explanation Figures — figure_shap","title":"Generate and Plot SHAP Explanation Figures — figure_shap","text":"Trains surrogate model (XGBoost Lasso) original model's output scores. calculates visualizes SHAP values explain feature's contribution, providing insights original model's behavior.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_shap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Plot SHAP Explanation Figures — figure_shap","text":"","code":"figure_shap(   data,   raw_data,   output_file,   model_type = \"xgboost\",   output_type = \"pdf\",   target_type = c(\"diagnosis\", \"prognosis\") )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_shap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Plot SHAP Explanation Figures — figure_shap","text":"data list object containing model evaluation results. must contain sample_score, data frame sample ID first column model's output score another column. raw_data data frame containing original feature data used training. column structure must fixed based target_type: \"diagnosis\": 1st col=ID, 2nd col=Outcome/Label, 3rd+ cols=Features. \"prognosis\": 1st col=ID, 2nd col=Outcome, 3rd col=Time, 4th+ cols=Features. output_file character string, base name output filename (without extension). model_type character string specifying surrogate model SHAP calculation. Options: \"xgboost\" (default) \"lasso\". output_type character string, desired output file format. Options: \"pdf\" (default), \"png\", \"svg\". target_type character string indicating analysis type. determines raw_data interpreted. Options: \"diagnosis\" \"prognosis\".","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_shap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Plot SHAP Explanation Figures — figure_shap","text":"NULL. function saves combined plot (SHAP summary importance) specified output file.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/figure_shap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate and Plot SHAP Explanation Figures — figure_shap","text":"","code":"if (FALSE) { # \\dontrun{ # --- Example for a Diagnosis Model --- # 1. Create dummy raw data and model results set.seed(123) train_dia <- data.frame(   SampleID = paste0(\"S\", 1:100),   Label = sample(c(0, 1), 100, replace = TRUE),   FeatureA = rnorm(100),   FeatureB = runif(100) )  bagging_xb_results <- list(   sample_score = data.frame(     ID = paste0(\"S\", 1:100),     score = runif(100, 0, 1) # Dummy scores from a model   ) )  # 2. Generate SHAP plot # Features used will be 'FeatureA' and 'FeatureB' figure_shap(   data = bagging_xb_results,   raw_data = train_dia,   output_file = \"Dia_SHAP_Example\",   model_type = \"xgboost\",   output_type = \"pdf\",   target_type = \"diagnosis\" )  # --- Example for a Prognosis Model --- # 1. Create dummy raw data and model results train_pro <- data.frame(   PatientID = paste0(\"P\", 1:100),   Status = sample(c(0, 1), 100, replace = TRUE),   Time = runif(100, 50, 2000),   Gene1 = rnorm(100),   ClinicalVar = sample(c(\"Low\", \"High\"), 100, replace = TRUE) )  stacking_gbm_pro_results <- list(   sample_score = data.frame(     ID = paste0(\"P\", 1:100),     score = runif(100, 0, 1) # Dummy scores from a stacking model   ) )  # 2. Generate SHAP plot # Features used will be 'Gene1' and 'ClinicalVar' figure_shap(   data = stacking_gbm_pro_results,   raw_data = train_pro,   output_file = \"Pro_SHAP_Example\",   model_type = \"lasso\",   output_type = \"png\",   target_type = \"prognosis\" ) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/find_optimal_threshold_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Optimal Probability Threshold — find_optimal_threshold_dia","title":"Find Optimal Probability Threshold — find_optimal_threshold_dia","text":"Determines optimal probability threshold binary classification based maximizing F1-score Youden's J statistic.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/find_optimal_threshold_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Optimal Probability Threshold — find_optimal_threshold_dia","text":"","code":"find_optimal_threshold_dia(   prob_positive,   y_true,   type = c(\"f1\", \"youden\"),   pos_class,   neg_class )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/find_optimal_threshold_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Optimal Probability Threshold — find_optimal_threshold_dia","text":"prob_positive numeric vector predicted probabilities positive class. y_true factor vector true class labels. type character string, specifying optimization criterion: \"f1\" F1-score \"youden\" Youden's J statistic (Sensitivity + Specificity - 1). pos_class character string, label positive class. neg_class character string, label negative class.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/find_optimal_threshold_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Optimal Probability Threshold — find_optimal_threshold_dia","text":"numeric value, optimal probability threshold.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/find_optimal_threshold_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Optimal Probability Threshold — find_optimal_threshold_dia","text":"","code":"y_true_ex <- factor(c(\"Negative\", \"Positive\", \"Positive\", \"Negative\", \"Positive\"),                     levels = c(\"Negative\", \"Positive\")) prob_ex <- c(0.1, 0.8, 0.6, 0.3, 0.9)  # Find threshold maximizing F1-score opt_f1_threshold <- find_optimal_threshold_dia(   prob_positive = prob_ex,   y_true = y_true_ex,   type = \"f1\",   pos_class = \"Positive\",   neg_class = \"Negative\" ) print(opt_f1_threshold) #> [1] 0.6  # Find threshold maximizing Youden's J opt_youden_threshold <- find_optimal_threshold_dia(   prob_positive = prob_ex,   y_true = y_true_ex,   type = \"youden\",   pos_class = \"Positive\",   neg_class = \"Negative\" ) print(opt_youden_threshold) #> [1] 0.6"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","title":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","text":"Trains Gradient Boosting Machine (GBM) model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","text":"","code":"gbm_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning interaction.depth, n.trees, shrinkage (TRUE) use fixed values (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","text":"caret::train object representing trained GBM model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Gradient Boosting Machine (GBM) Model for Classification — gbm_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # gbm_model <- gbm_dia(prepared_data$X, prepared_data$y) # print(gbm_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","title":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","text":"Trains Gradient Boosting Machine (GBM) model Cox proportional hazards loss function using gbm.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","text":"","code":"gbm_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform simplified hyperparameter tuning. TRUE, n.trees, interaction.depth, shrinkage set predefined values suitable tuning; otherwise, default values used.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","text":"list class \"train\" containing trained gbm model object, names features used training, model type. returned object also includes fitted_scores (linear predictor), y_surv, best_iter.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/gbm_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Gradient Boosting Machine (GBM) for Survival Data — gbm_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # gbm_model <- gbm_pro(prepared_data$X, prepared_data$Y_surv) # print(gbm_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Registered Diagnostic Models — get_registered_models_dia","title":"Get Registered Diagnostic Models — get_registered_models_dia","text":"Retrieves list diagnostic model functions currently registered internal environment.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Registered Diagnostic Models — get_registered_models_dia","text":"","code":"get_registered_models_dia()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Registered Diagnostic Models — get_registered_models_dia","text":"named list names registered model names values corresponding model functions.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Registered Diagnostic Models — get_registered_models_dia","text":"","code":"# Get all currently registered models # initialize_modeling_system_dia() # Ensure system is initialized # models <- get_registered_models_dia() # names(models) # See available model names"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Registered Prognostic Models — get_registered_models_pro","title":"Get Registered Prognostic Models — get_registered_models_pro","text":"Retrieves list prognostic model functions currently registered internal environment.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Registered Prognostic Models — get_registered_models_pro","text":"","code":"get_registered_models_pro()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Registered Prognostic Models — get_registered_models_pro","text":"named list names registered model names values corresponding model functions.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/get_registered_models_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Registered Prognostic Models — get_registered_models_pro","text":"","code":"# Get all currently registered models # initialize_modeling_system_pro() # Ensure system is initialized # models <- get_registered_models_pro() # names(models) # See available model names"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/imbalance_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","title":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","text":"Implements EasyEnsemble algorithm. trains multiple base models balanced subsets data (undersampling majority class) aggregates predictions.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/imbalance_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","text":"","code":"imbalance_dia(   data,   base_model_name = \"xb\",   n_estimators = 10,   tune_base_model = FALSE,   threshold_choices = \"default\",   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\",   seed = 456 )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/imbalance_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","text":"data data frame first column sample ID, second outcome label, subsequent columns features. base_model_name character string, name base diagnostic model use (e.g., \"xb\", \"rf\"). model must registered. n_estimators integer, number base models train (number subsets). tune_base_model Logical, whether enable tuning base model. threshold_choices character string (e.g., \"f1\", \"youden\", \"default\") numeric value (0-1) determining evaluation threshold ensemble. positive_label_value numeric character value raw data representing positive class. negative_label_value numeric character value raw data representing negative class. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\"). seed integer, reproducibility.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/imbalance_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/imbalance_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an EasyEnsemble Model for Imbalanced Classification — imbalance_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_dia_imbalanced' is a data frame loaded from your package # data(train_dia_imbalanced) initialize_modeling_system_dia()  easyensemble_results <- imbalance_dia(   data = train_dia_imbalanced,   base_model_name = \"xb\",   n_estimators = 5,   threshold_choices = \"f1\",   positive_label_value = 1,   negative_label_value = 0 ) print_model_summary_dia(\"EasyEnsemble (XGBoost)\", easyensemble_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Diagnostic Modeling System — initialize_modeling_system_dia","title":"Initialize Diagnostic Modeling System — initialize_modeling_system_dia","text":"Initializes diagnostic modeling system loading required packages registering default diagnostic models (Random Forest, XGBoost, SVM, MLP, Lasso, Elastic Net, Ridge, LDA, QDA, Naive Bayes, Decision Tree, GBM). function called using run_models_dia() ensemble methods.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Diagnostic Modeling System — initialize_modeling_system_dia","text":"","code":"initialize_modeling_system_dia()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Diagnostic Modeling System — initialize_modeling_system_dia","text":"Invisible NULL. Initializes internal model registry.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Diagnostic Modeling System — initialize_modeling_system_dia","text":"","code":"# Initialize the system (typically run once at the start of a session or script) initialize_modeling_system_dia() #> Diagnostic modeling system initialized and default models registered.  # Check if models are now registered # get_registered_models_dia()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Prognostic Modeling System — initialize_modeling_system_pro","title":"Initialize Prognostic Modeling System — initialize_modeling_system_pro","text":"Initializes prognostic modeling system loading required packages registering default prognostic models (Lasso, Elastic Net, Ridge, Random Survival Forest, Stepwise Cox, GBM Cox). function called using run_models_pro() ensemble methods.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Prognostic Modeling System — initialize_modeling_system_pro","text":"","code":"initialize_modeling_system_pro()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Prognostic Modeling System — initialize_modeling_system_pro","text":"Invisible NULL. Initializes internal model registry.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/initialize_modeling_system_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Prognostic Modeling System — initialize_modeling_system_pro","text":"","code":"# Initialize the system (typically run once at the start of a session or script) initialize_modeling_system_pro() #> Prognosis modeling system initialized and default models registered.  # Check if models are now registered # get_registered_models_pro()"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","title":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","text":"Trains Lasso-regularized logistic regression model using caret::train (via glmnet method) binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","text":"","code":"lasso_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning lambda (TRUE) use fixed value (FALSE). alpha fixed 1 Lasso. cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","text":"caret::train object representing trained Lasso model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Lasso (L1 Regularized Logistic Regression) Model for Classification — lasso_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # lasso_model <- lasso_dia(prepared_data$X, prepared_data$y) # print(lasso_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","title":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","text":"Trains Cox proportional hazards model Lasso regularization using glmnet.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","text":"","code":"lasso_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform hyperparameter tuning (currently simplified/ignored direct cv.glmnet usage inherently tunes lambda).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","text":"list class \"train\" containing trained glmnet model object, names features used training, model type. returned object also includes fitted_scores (linear predictor) y_surv.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lasso_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Lasso Cox Proportional Hazards Model — lasso_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # prepared_data <- load_and_prepare_data_pro(...) # lasso_model <- lasso_pro(prepared_data$X, prepared_data$Y_surv) # print(lasso_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lda_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","title":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","text":"Trains Linear Discriminant Analysis (LDA) model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lda_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","text":"","code":"lda_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lda_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning (currently ignored LDA). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lda_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","text":"caret::train object representing trained LDA model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/lda_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Linear Discriminant Analysis (LDA) Model for Classification — lda_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # lda_model <- lda_dia(prepared_data$X, prepared_data$y) # print(lda_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","title":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","text":"Loads CSV file containing patient data, extracts features, converts label column factor suitable classification models. Handles basic data cleaning like trimming whitespace type conversion.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","text":"","code":"load_and_prepare_data_dia(   data_path,   label_col_name,   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\" )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","text":"data_path character string, file path input CSV data. first column assumed sample ID. label_col_name character string, name column containing class labels. positive_label_value numeric character value represents positive class raw data. negative_label_value numeric character value represents negative class raw data. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\").","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","text":"list containing: X: data frame features (columns except ID label). y: factor vector class labels, levels new_negative_label new_positive_label. sample_ids: vector sample IDs (first column input data). pos_class_label: character string used positive class factor level. neg_class_label: character string used negative class factor level. y_original_numeric: original numeric/character vector labels.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and Prepare Data for Diagnostic Models — load_and_prepare_data_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Create a dummy CSV file for demonstration dummy_data <- data.frame(   ID = paste0(\"Patient\", 1:50),   FeatureA = rnorm(50),   FeatureB = runif(50, 0, 100),   CategoricalFeature = sample(c(\"X\", \"Y\", \"Z\"), 50, replace = TRUE),   Disease_Status = sample(c(0, 1), 50, replace = TRUE) ) write.csv(dummy_data, \"dummy_diagnosis_data.csv\", row.names = FALSE)  # Load and prepare data prepared_data <- load_and_prepare_data_dia(   data_path = \"dummy_diagnosis_data.csv\",   label_col_name = \"Disease_Status\",   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Case\",   new_negative_label = \"Control\" )  # Check prepared data structure str(prepared_data$X) table(prepared_data$y)  # Clean up dummy file unlink(\"dummy_diagnosis_data.csv\") } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","title":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","text":"Loads CSV file containing patient data, extracts features, outcome, time columns, prepares format suitable survival analysis models. Handles basic data cleaning like NA removal column type conversion.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","text":"","code":"load_and_prepare_data_pro(   data_path,   outcome_col_name,   time_col_name,   time_unit = c(\"day\", \"month\", \"year\") )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","text":"data_path character string, file path input CSV data. first column assumed sample ID. outcome_col_name character string, name column containing event status (0 censored, 1 event). time_col_name character string, name column containing event censoring time. time_unit character string, unit time time_col_name. Can \"day\", \"month\", \"year\". Times converted days internally.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","text":"list containing: X: data frame features (columns except ID, outcome, time). Y_surv: survival::Surv object created time outcome. sample_ids: vector sample IDs (first column input data). outcome_numeric: numeric vector outcome status. time_numeric: numeric vector time, converted days.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/load_and_prepare_data_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and Prepare Data for Prognostic Models — load_and_prepare_data_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Create a dummy CSV file for demonstration dummy_data <- data.frame(   ID = paste0(\"Patient\", 1:50),   FeatureA = rnorm(50),   FeatureB = runif(50, 0, 100),   CategoricalFeature = sample(c(\"A\", \"B\", \"C\"), 50, replace = TRUE),   Outcome_Status = sample(c(0, 1), 50, replace = TRUE),   Followup_Time_Months = runif(50, 10, 60) ) write.csv(dummy_data, \"dummy_prognosis_data.csv\", row.names = FALSE)  # Load and prepare data prepared_data <- load_and_prepare_data_pro(   data_path = \"dummy_prognosis_data.csv\",   outcome_col_name = \"Outcome_Status\",   time_col_name = \"Followup_Time_Months\",   time_unit = \"month\" )  # Check prepared data structure str(prepared_data$X) print(prepared_data$Y_surv)  # Clean up dummy file unlink(\"dummy_prognosis_data.csv\") } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/min_max_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Min-Max Normalization — min_max_normalize","title":"Min-Max Normalization — min_max_normalize","text":"Normalizes numeric vector range 0 1 using min-max scaling.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/min_max_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min-Max Normalization — min_max_normalize","text":"","code":"min_max_normalize(x, min_val = NULL, max_val = NULL)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/min_max_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min-Max Normalization — min_max_normalize","text":"x numeric vector normalized. min_val Optional. minimum value use normalization. NULL, minimum x used. max_val Optional. maximum value use normalization. NULL, maximum x used.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/min_max_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min-Max Normalization — min_max_normalize","text":"numeric vector values scaled 0 1. min_val max_val equal (x variance), returns vector 0.5s.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/min_max_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min-Max Normalization — min_max_normalize","text":"","code":"# Normalize a vector x_vec <- c(10, 20, 30, 40, 50) normalized_x <- min_max_normalize(x_vec) print(normalized_x) # Should be 0, 0.25, 0.5, 0.75, 1 #> [1] 0.00 0.25 0.50 0.75 1.00  # Normalize with custom min/max custom_normalized_x <- min_max_normalize(x_vec, min_val = 0, max_val = 100) print(custom_normalized_x) # Should be 0.1, 0.2, 0.3, 0.4, 0.5 #> [1] 0.1 0.2 0.3 0.4 0.5"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/mlp_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","title":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","text":"Trains Multi-Layer Perceptron (MLP) neural network model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/mlp_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","text":"","code":"mlp_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/mlp_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning using caret's default grid (TRUE) fixed value (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/mlp_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","text":"caret::train object representing trained MLP model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/mlp_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Multi-Layer Perceptron (Neural Network) Model for Classification — mlp_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # mlp_model <- mlp_dia(prepared_data$X, prepared_data$y) # print(mlp_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Multiple Diagnostic Models — models_dia","title":"Run Multiple Diagnostic Models — models_dia","text":"Trains evaluates one registered diagnostic models given dataset.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Multiple Diagnostic Models — models_dia","text":"","code":"models_dia(   data,   model = \"all_dia\",   tune = FALSE,   seed = 123,   threshold_choices = \"default\",   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\" )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Multiple Diagnostic Models — models_dia","text":"data data frame first column sample ID, second outcome label, subsequent columns features. model character string vector character strings, specifying models run. Use \"all_dia\" run registered models. tune Logical, whether enable hyperparameter tuning individual models. seed integer, reproducibility random processes. threshold_choices character string (e.g., \"f1\", \"youden\", \"default\") numeric value (0-1), named list/vector allowing different threshold strategies/values model. positive_label_value numeric character value raw data representing positive class. negative_label_value numeric character value raw data representing negative class. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\").","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Multiple Diagnostic Models — models_dia","text":"named list, element corresponds run model contains trained model_object, sample_score data frame, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Multiple Diagnostic Models — models_dia","text":"","code":"if (FALSE) { # \\dontrun{ # 1. Assume 'train_dia' is a data frame loaded from your package # data(train_dia) # str(train_dia) # > 'data.frame': 100 obs. of 5 variables: # > $ ID            : chr \"Patient1\" \"Patient2\" ... # > $ Disease_Status: int 0 1 1 0 1 ... # > $ FeatureA      : num -0.56 0.82 ... # > $ FeatureB      : num 89.2 26.6 ... # > $ FeatureC      : Factor w/ 3 levels \"X\",\"Y\",\"Z\": 2 3 1 2 3 ...  # 2. Initialize the modeling system initialize_modeling_system_dia()  # 3. Run selected models results <- models_dia(   data = train_dia,   model = c(\"rf\", \"lasso\"), # Run only Random Forest and Lasso   threshold_choices = list(rf = \"f1\", lasso = 0.6), # Different thresholds   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Case\",   new_negative_label = \"Control\",   seed = 42 )  # 4. Print summaries for (model_name in names(results)) {   print_model_summary_dia(model_name, results[[model_name]]) } } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Multiple Prognostic Models — models_pro","title":"Run Multiple Prognostic Models — models_pro","text":"Trains evaluates one registered prognostic models given dataset.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Multiple Prognostic Models — models_pro","text":"","code":"models_pro(   data,   model = \"all_pro\",   tune = FALSE,   seed = 123,   time_unit = \"day\",   years_to_evaluate = c(1, 3, 5) )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Multiple Prognostic Models — models_pro","text":"data data frame training. first column must sample ID, second column event status (0/1), third column time, subsequent columns features. model character string vector character strings, specifying models run. Use \"all_pro\" run registered models. tune Logical, whether enable hyperparameter tuning individual models. seed integer, reproducibility random processes. time_unit character string, unit time third column data. Can \"day\", \"month\", \"year\". years_to_evaluate numeric vector specific years calculate time-dependent AUROC.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Multiple Prognostic Models — models_pro","text":"named list, element corresponds run model contains trained model_object, sample_score data frame, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/models_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Multiple Prognostic Models — models_pro","text":"","code":"if (FALSE) { # \\dontrun{ # 1. Assume 'train_pro' is a data frame loaded from your package # data(train_pro) # str(train_pro) # > 'data.frame': 100 obs. of 5 variables: # > $ ID               : chr \"Patient1\" \"Patient2\" ... # > $ Event_Status     : int 0 1 1 0 1 ... # > $ Followup_Time_Days: num 1500 890 ... # > $ FeatureA         : num -0.56 0.82 ... # > $ FeatureB         : num 89.2 26.6 ...  # 2. Initialize the modeling system initialize_modeling_system_pro()  # 3. Run selected models results <- models_pro(   data = train_pro,   model = c(\"lasso_pro\", \"rsf_pro\"), # Run only Lasso and RSF   years_to_evaluate = c(1, 3, 5),   seed = 42 )  # 4. Print summaries for (model_name in names(results)) {   print_model_summary_pro(model_name, results[[model_name]]) } } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/nb_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Naive Bayes Model for Classification — nb_dia","title":"Train a Naive Bayes Model for Classification — nb_dia","text":"Trains Naive Bayes model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/nb_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Naive Bayes Model for Classification — nb_dia","text":"","code":"nb_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/nb_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Naive Bayes Model for Classification — nb_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning using caret's default grid (TRUE) fixed values (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/nb_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Naive Bayes Model for Classification — nb_dia","text":"caret::train object representing trained Naive Bayes model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/nb_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Naive Bayes Model for Classification — nb_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # nb_model <- nb_dia(prepared_data$X, prepared_data$y) # print(nb_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Diagnostic Model Summary — print_model_summary_dia","title":"Print Diagnostic Model Summary — print_model_summary_dia","text":"Prints formatted summary evaluation metrics diagnostic model, either training data new data evaluation.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Diagnostic Model Summary — print_model_summary_dia","text":"","code":"print_model_summary_dia(model_name, results_list, on_new_data = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Diagnostic Model Summary — print_model_summary_dia","text":"model_name character string, name model (e.g., \"rf\", \"Bagging (RF)\"). results_list list containing model evaluation results, typically element output run_models_dia() result bagging_dia(), stacking_dia(), voting_dia(), imbalance_dia(). must contain evaluation_metrics model_object (applicable). on_new_data Logical, indicating whether results applying model new, unseen data (TRUE) training/internal validation data (FALSE).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Diagnostic Model Summary — print_model_summary_dia","text":"NULL. Prints summary console.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Diagnostic Model Summary — print_model_summary_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `results` from run_models_dia example # for (model_name in names(results)) { #   print_model_summary_dia(model_name, results[[model_name]], on_new_data = FALSE) # }  # Example for a failed model # failed_results <- list(evaluation_metrics = list(error = \"Training failed due to invalid input\")) # print_model_summary_dia(\"MyFailedModel\", failed_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Prognostic Model Summary — print_model_summary_pro","title":"Print Prognostic Model Summary — print_model_summary_pro","text":"Prints formatted summary evaluation metrics prognostic model, either training data new data evaluation.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Prognostic Model Summary — print_model_summary_pro","text":"","code":"print_model_summary_pro(model_name, results_list, on_new_data = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Prognostic Model Summary — print_model_summary_pro","text":"model_name character string, name model (e.g., \"lasso_pro\"). results_list list containing model evaluation results, typically element output run_models_pro() result bagging_pro(), stacking_pro(). must contain evaluation_metrics model_object (applicable). on_new_data Logical, indicating whether results applying model new, unseen data (TRUE) training/internal validation data (FALSE).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Prognostic Model Summary — print_model_summary_pro","text":"NULL. Prints summary console.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/print_model_summary_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Prognostic Model Summary — print_model_summary_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `results` from run_models_pro example # for (model_name in names(results)) { #   print_model_summary_pro(model_name, results[[model_name]], on_new_data = FALSE) # }  # Example for a failed model # failed_results <- list(evaluation_metrics = list(error = \"Training failed due to invalid input\")) # print_model_summary_pro(\"MyFailedModel\", failed_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/qda_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","title":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","text":"Trains Quadratic Discriminant Analysis (QDA) model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/qda_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","text":"","code":"qda_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/qda_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning (currently ignored QDA). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/qda_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","text":"caret::train object representing trained QDA model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/qda_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Quadratic Discriminant Analysis (QDA) Model for Classification — qda_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # qda_model <- qda_dia(prepared_data$X, prepared_data$y) # print(qda_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Diagnostic Model Function — register_model_dia","title":"Register a Diagnostic Model Function — register_model_dia","text":"Registers user-defined pre-defined diagnostic model function internal model registry. allows function called later registered name, facilitating modular model management system.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Diagnostic Model Function — register_model_dia","text":"","code":"register_model_dia(name, func)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Diagnostic Model Function — register_model_dia","text":"name character string, unique name register model . func function, R function implementing diagnostic model. function typically accept X (features) y (labels) first two arguments return caret::train object.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a Diagnostic Model Function — register_model_dia","text":"NULL. function registers model function invisibly.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Diagnostic Model Function — register_model_dia","text":"","code":"# Example of a dummy model function for registration my_dummy_rf_model <- function(X, y, tune = FALSE, cv_folds = 5) {   message(\"Training dummy RF model...\")   # In a real scenario, this would train a random forest model   # For example purposes, it just returns a dummy object   list(finalModel = \"dummy_rf_fit\", method = \"rf\", tuneValue = list(mtry=1),        trainingData = cbind(X, .outcome = y), class = \"train\",        predict = function(newdata, type) {            if (type == \"prob\") {                probs <- matrix(runif(nrow(newdata)*2), ncol=2, byrow=TRUE)                probs <- t(apply(probs, 1, function(x) x/sum(x)))                colnames(probs) <- levels(y)                return(probs)            } else {                return(factor(sample(levels(y), nrow(newdata), replace = TRUE), levels = levels(y)))            }        }) }  # Register the dummy model (ensure initialize_modeling_system_dia() has run first) # initialize_modeling_system_dia() # Uncomment if running in a fresh session # register_model_dia(\"dummy_rf\", my_dummy_rf_model) # get_registered_models_dia() # Check if registered"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Prognostic Model Function — register_model_pro","title":"Register a Prognostic Model Function — register_model_pro","text":"Registers user-defined pre-defined prognostic model function internal model registry. allows function called later registered name, facilitating modular model management system.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Prognostic Model Function — register_model_pro","text":"","code":"register_model_pro(name, func)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Prognostic Model Function — register_model_pro","text":"name character string, unique name register model . func function, R function implementing prognostic model. function typically accept X (features) y_surv (survival object) first two arguments.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a Prognostic Model Function — register_model_pro","text":"NULL. function registers model function invisibly.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/register_model_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Prognostic Model Function — register_model_pro","text":"","code":"# Example of a dummy model function for registration my_dummy_cox_model <- function(X, y_surv, tune = FALSE) {   # In a real scenario, this would train a survival model   # For example purposes, it just returns a dummy object   message(\"Training dummy Cox model...\")   dummy_fit <- list(fitted_scores = runif(nrow(X)), y_surv = y_surv)   structure(list(finalModel = dummy_fit, X_train_cols = colnames(X),                  model_type = \"survival_dummy_cox\"), class = \"train\") }  # Register the dummy model (ensure initialize_modeling_system_pro() has run first) # initialize_modeling_system_pro() # Uncomment if running in a fresh session # register_model_pro(\"dummy_cox\", my_dummy_cox_model) # get_registered_models_pro() # Check if registered"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rf_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Random Forest Model for Classification — rf_dia","title":"Train a Random Forest Model for Classification — rf_dia","text":"Trains Random Forest model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rf_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Random Forest Model for Classification — rf_dia","text":"","code":"rf_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rf_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Random Forest Model for Classification — rf_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning using caret's default grid (TRUE) use fixed mtry value (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rf_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Random Forest Model for Classification — rf_dia","text":"caret::train object representing trained Random Forest model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rf_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Random Forest Model for Classification — rf_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # rf_model <- rf_dia(prepared_data$X, prepared_data$y) # print(rf_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","title":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","text":"Trains Ridge-regularized logistic regression model using caret::train (via glmnet method) binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","text":"","code":"ridge_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning lambda (TRUE) use fixed value (FALSE). alpha fixed 0 Ridge. cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","text":"caret::train object representing trained Ridge model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Ridge (L2 Regularized Logistic Regression) Model for Classification — ridge_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # ridge_model <- ridge_dia(prepared_data$X, prepared_data$y) # print(ridge_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","title":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","text":"Trains Cox proportional hazards model Ridge regularization using glmnet.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","text":"","code":"ridge_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform hyperparameter tuning (currently simplified/ignored direct cv.glmnet usage inherently tunes lambda).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","text":"list class \"train\" containing trained glmnet model object, names features used training, model type. returned object also includes fitted_scores (linear predictor), y_surv, best_lambda.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/ridge_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Ridge Cox Proportional Hazards Model — ridge_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # ridge_model <- ridge_pro(prepared_data$X, prepared_data$Y_surv) # print(ridge_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rsf_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Random Survival Forest Model — rsf_pro","title":"Train a Random Survival Forest Model — rsf_pro","text":"Trains Random Survival Forest (RSF) model using randomForestSRC.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rsf_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Random Survival Forest Model — rsf_pro","text":"","code":"rsf_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rsf_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Random Survival Forest Model — rsf_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform hyperparameter tuning (simplified message currently provided, full tuning tune.rfsrc recommended advanced use).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rsf_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Random Survival Forest Model — rsf_pro","text":"list class \"train\" containing trained rfsrc model object, names features used training, model type. returned object also includes fitted_scores y_surv.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/rsf_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Random Survival Forest Model — rsf_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # rsf_model <- rsf_pro(prepared_data$X, prepared_data$Y_surv) # print(rsf_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Stacking Diagnostic Model — stacking_dia","title":"Train a Stacking Diagnostic Model — stacking_dia","text":"Implements Stacking ensemble. trains multiple base models, uses predictions features train meta-model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Stacking Diagnostic Model — stacking_dia","text":"","code":"stacking_dia(   results_all_models,   data,   meta_model_name,   top = 5,   tune_meta = FALSE,   threshold_choices = \"f1\",   seed = 789,   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\" )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Stacking Diagnostic Model — stacking_dia","text":"results_all_models list results models_dia(), containing trained base model objects evaluation metrics. data data frame first column sample ID, second outcome label, subsequent columns features. Used training meta-model. meta_model_name character string, name meta-model use (e.g., \"lasso\", \"gbm\"). model must registered. top integer, number top-performing base models (ranked AUROC) select stacking ensemble. tune_meta Logical, whether enable tuning meta-model. threshold_choices character string (e.g., \"f1\", \"youden\", \"default\") numeric value (0-1) determining evaluation threshold ensemble. seed integer, reproducibility. positive_label_value numeric character value raw data representing positive class. negative_label_value numeric character value raw data representing negative class. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\").","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Stacking Diagnostic Model — stacking_dia","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Stacking Diagnostic Model — stacking_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_dia' and 'base_model_results' from previous examples exist # data(train_dia) # base_model_results <- models_dia(data = train_dia, model = c(\"rf\", \"lasso\", \"gbm\"))  stacking_results <- stacking_dia(   results_all_models = base_model_results,   data = train_dia,   meta_model_name = \"gbm\",   top = 3,   threshold_choices = \"f1\",   positive_label_value = 1,   negative_label_value = 0 ) print_model_summary_dia(\"Stacking (GBM)\", stacking_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Stacking Prognostic Model — stacking_pro","title":"Train a Stacking Prognostic Model — stacking_pro","text":"Implements Stacking ensemble prognostic models. trains multiple base models uses predictions train meta-model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Stacking Prognostic Model — stacking_pro","text":"","code":"stacking_pro(   results_all_models,   data,   meta_model_name,   top = 3,   tune_meta = FALSE,   time_unit = \"day\",   years_to_evaluate = c(1, 3, 5),   seed = 789 )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Stacking Prognostic Model — stacking_pro","text":"results_all_models list results models_pro(), containing trained base model objects evaluation metrics. data data frame training meta-model. first column must ID, second event status (0/1), third time, subsequent columns features. meta_model_name character string, name meta-model use (e.g., \"lasso_pro\", \"gbm_pro\"). model must registered. top integer, number top-performing base models (ranked C-index) select stacking ensemble. tune_meta Logical, whether enable tuning meta-model. time_unit character string, unit time third column data. years_to_evaluate numeric vector specific years calculate time-dependent AUROC evaluation. seed integer, reproducibility.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Stacking Prognostic Model — stacking_pro","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stacking_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Stacking Prognostic Model — stacking_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_pro' is loaded and 'base_model_results' from models_pro() exist # data(train_pro) # base_model_results <- models_pro(data = train_pro, model = \"all_pro\")  stacking_gbm_results <- stacking_pro(   results_all_models = base_model_results,   data = train_pro,   meta_model_name = \"gbm_pro\",   top = 3,   years_to_evaluate = c(1, 3) ) print_model_summary_pro(\"Stacking (GBM)\", stacking_gbm_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stepcox_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","title":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","text":"Trains Cox proportional hazards model performs backward stepwise selection using MASS::stepAIC select important features.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stepcox_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","text":"","code":"stepcox_pro(X, y_surv, tune = FALSE)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stepcox_pro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","text":"X data frame features. y_surv survival::Surv object representing survival outcome. tune Logical, whether perform hyperparameter tuning (currently ignored).","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stepcox_pro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","text":"list class \"train\" containing trained coxph model object stepwise selection, names features used training, model type. returned object also includes fitted_scores (linear predictor) y_surv.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/stepcox_pro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Stepwise Cox Proportional Hazards Model — stepcox_pro","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_pro example # stepcox_model <- stepcox_pro(prepared_data$X, prepared_data$Y_surv) # print(stepcox_model$finalModel) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/svm_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","title":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","text":"Trains Support Vector Machine (SVM) model linear kernel using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/svm_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","text":"","code":"svm_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/svm_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning using caret's default grid (TRUE) fixed value (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/svm_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","text":"caret::train object representing trained SVM model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/svm_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Support Vector Machine (Linear Kernel) Model for Classification — svm_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # svm_model <- svm_dia(prepared_data$X, prepared_data$y) # print(svm_model) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Data for Diagnostic Models — test_dia","title":"Test Data for Diagnostic Models — test_dia","text":"test dataset evaluating diagnostic models, structure identical train_dia.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Data for Diagnostic Models — test_dia","text":"","code":"test_dia"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_dia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Data for Diagnostic Models — test_dia","text":"data frame rows samples 22 columns: sample character. Unique identifier sample. outcome integer. binary outcome (0 1). AC004637.1 numeric. Gene expression level. AC008459.1 numeric. Gene expression level. AC009242.1 numeric. Gene expression level. AC016735.1 numeric. Gene expression level. AC090125.1 numeric. Gene expression level. AC104237.3 numeric. Gene expression level. AC112721.2 numeric. Gene expression level. AC246817.1 numeric. Gene expression level. AL135841.1 numeric. Gene expression level. AL139241.1 numeric. Gene expression level. HYMAI numeric. Gene expression level. KCNIP2.AS1 numeric. Gene expression level. LINC00639 numeric. Gene expression level. LINC00922 numeric. Gene expression level. LINC00924 numeric. Gene expression level. LINC00958 numeric. Gene expression level. LINC01028 numeric. Gene expression level. LINC01614 numeric. Gene expression level. LINC01644 numeric. Gene expression level. PRDM16.DT numeric. Gene expression level.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_dia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test Data for Diagnostic Models — test_dia","text":"Stored data/test_dia.rda.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Data for Prognostic (Survival) Models — test_pro","title":"Test Data for Prognostic (Survival) Models — test_pro","text":"test dataset evaluating prognostic models, structure identical train_pro.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Data for Prognostic (Survival) Models — test_pro","text":"","code":"test_pro"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_pro.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Data for Prognostic (Survival) Models — test_pro","text":"data frame rows samples 31 columns: sample character. Unique identifier sample. outcome integer. event status (0 1). time numeric. time event censoring. AC004990.1 numeric. Gene expression level. AC055854.1 numeric. Gene expression level. AC084212.1 numeric. Gene expression level. AC092118.1 numeric. Gene expression level. AC093515.1 numeric. Gene expression level. AC104211.1 numeric. Gene expression level. AC105046.1 numeric. Gene expression level. AC105219.1 numeric. Gene expression level. AC110772.2 numeric. Gene expression level. AC133644.1 numeric. Gene expression level. AL133467.1 numeric. Gene expression level. AL391845.2 numeric. Gene expression level. AL590434.1 numeric. Gene expression level. AL603840.1 numeric. Gene expression level. AP000851.2 numeric. Gene expression level. AP001434.1 numeric. Gene expression level. C9orf163 numeric. Gene expression level. FAM153CP numeric. Gene expression level. HOTAIR numeric. Gene expression level. HYMAI numeric. Gene expression level. LINC00165 numeric. Gene expression level. LINC01028 numeric. Gene expression level. LINC01152 numeric. Gene expression level. LINC01497 numeric. Gene expression level. LINC01614 numeric. Gene expression level. LINC01929 numeric. Gene expression level. LINC02408 numeric. Gene expression level. SIRLNT numeric. Gene expression level.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/test_pro.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test Data for Prognostic (Survival) Models — test_pro","text":"Stored data/test_pro.rda.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Training Data for Diagnostic Models — train_dia","title":"Training Data for Diagnostic Models — train_dia","text":"training dataset diagnostic models, containing sample IDs, binary outcomes, gene expression features.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training Data for Diagnostic Models — train_dia","text":"","code":"train_dia"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_dia.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Training Data for Diagnostic Models — train_dia","text":"data frame rows samples 22 columns: sample character. Unique identifier sample. outcome integer. binary outcome, 1 typically represents positive case 0 negative case. AC004637.1 numeric. Gene expression level. AC008459.1 numeric. Gene expression level. AC009242.1 numeric. Gene expression level. AC016735.1 numeric. Gene expression level. AC090125.1 numeric. Gene expression level. AC104237.3 numeric. Gene expression level. AC112721.2 numeric. Gene expression level. AC246817.1 numeric. Gene expression level. AL135841.1 numeric. Gene expression level. AL139241.1 numeric. Gene expression level. HYMAI numeric. Gene expression level. KCNIP2.AS1 numeric. Gene expression level. LINC00639 numeric. Gene expression level. LINC00922 numeric. Gene expression level. LINC00924 numeric. Gene expression level. LINC00958 numeric. Gene expression level. LINC01028 numeric. Gene expression level. LINC01614 numeric. Gene expression level. LINC01644 numeric. Gene expression level. PRDM16.DT numeric. Gene expression level.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_dia.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Training Data for Diagnostic Models — train_dia","text":"Stored data/train_dia.rda.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_dia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Training Data for Diagnostic Models — train_dia","text":"dataset used train machine learning models diagnosis. column names starting 'AC', 'AL', 'LINC', etc., feature variables.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_pro.html","id":null,"dir":"Reference","previous_headings":"","what":"Training Data for Prognostic (Survival) Models — train_pro","title":"Training Data for Prognostic (Survival) Models — train_pro","text":"training dataset prognostic models, containing sample IDs, survival outcomes (time event status), gene expression features.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_pro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training Data for Prognostic (Survival) Models — train_pro","text":"","code":"train_pro"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_pro.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Training Data for Prognostic (Survival) Models — train_pro","text":"data frame rows samples 31 columns: sample character. Unique identifier sample. outcome integer. event status, 1 indicates event occurred 0 indicates censoring. time numeric. time event censoring. AC004990.1 numeric. Gene expression level. AC055854.1 numeric. Gene expression level. AC084212.1 numeric. Gene expression level. AC092118.1 numeric. Gene expression level. AC093515.1 numeric. Gene expression level. AC104211.1 numeric. Gene expression level. AC105046.1 numeric. Gene expression level. AC105219.1 numeric. Gene expression level. AC110772.2 numeric. Gene expression level. AC133644.1 numeric. Gene expression level. AL133467.1 numeric. Gene expression level. AL391845.2 numeric. Gene expression level. AL590434.1 numeric. Gene expression level. AL603840.1 numeric. Gene expression level. AP000851.2 numeric. Gene expression level. AP001434.1 numeric. Gene expression level. C9orf163 numeric. Gene expression level. FAM153CP numeric. Gene expression level. HOTAIR numeric. Gene expression level. HYMAI numeric. Gene expression level. LINC00165 numeric. Gene expression level. LINC01028 numeric. Gene expression level. LINC01152 numeric. Gene expression level. LINC01497 numeric. Gene expression level. LINC01614 numeric. Gene expression level. LINC01929 numeric. Gene expression level. LINC02408 numeric. Gene expression level. SIRLNT numeric. Gene expression level.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_pro.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Training Data for Prognostic (Survival) Models — train_pro","text":"Stored data/train_pro.rda.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/train_pro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Training Data for Prognostic (Survival) Models — train_pro","text":"dataset used train machine learning models prognosis. features typically gene expression values.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/voting_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a Voting Ensemble Diagnostic Model — voting_dia","title":"Train a Voting Ensemble Diagnostic Model — voting_dia","text":"Implements Voting ensemble, combining predictions multiple base models soft hard voting.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/voting_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a Voting Ensemble Diagnostic Model — voting_dia","text":"","code":"voting_dia(   results_all_models,   data,   type = c(\"soft\", \"hard\"),   weight_metric = \"AUROC\",   top = 5,   seed = 789,   threshold_choices = \"f1\",   positive_label_value = 1,   negative_label_value = 0,   new_positive_label = \"Positive\",   new_negative_label = \"Negative\" )"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/voting_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a Voting Ensemble Diagnostic Model — voting_dia","text":"results_all_models list results models_dia(), containing trained base model objects evaluation metrics. data data frame first column sample ID, second outcome label, subsequent columns features. Used evaluation. type character string, \"soft\" weighted average probabilities \"hard\" majority class voting. weight_metric character string, metric use weighting base models soft voting (e.g., \"AUROC\", \"F1\"). Ignored hard voting. top integer, number top-performing base models (ranked weight_metric) include ensemble. seed integer, reproducibility. threshold_choices character string (e.g., \"f1\", \"youden\", \"default\") numeric value (0-1) determining evaluation threshold ensemble. positive_label_value numeric character value raw data representing positive class. negative_label_value numeric character value raw data representing negative class. new_positive_label character string, desired factor level name positive class (e.g., \"Positive\"). new_negative_label character string, desired factor level name negative class (e.g., \"Negative\").","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/voting_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a Voting Ensemble Diagnostic Model — voting_dia","text":"list containing model_object, sample_score, evaluation_metrics.","code":""},{"path":[]},{"path":"https://XIAOJIE0519.github.io/E2E/reference/voting_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a Voting Ensemble Diagnostic Model — voting_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assume 'train_dia' and 'base_model_results' from previous examples exist # data(train_dia) # base_model_results <- models_dia(data = train_dia, model = c(\"rf\", \"lasso\", \"gbm\"))  soft_voting_results <- voting_dia(   results_all_models = base_model_results,   data = train_dia,   type = \"soft\",   weight_metric = \"AUROC\",   top = 3,   threshold_choices = \"f1\",   positive_label_value = 1,   negative_label_value = 0 ) print_model_summary_dia(\"Soft Voting\", soft_voting_results) } # }"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/xb_dia.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an XGBoost Tree Model for Classification — xb_dia","title":"Train an XGBoost Tree Model for Classification — xb_dia","text":"Trains Extreme Gradient Boosting (XGBoost) model using caret::train binary classification.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/xb_dia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an XGBoost Tree Model for Classification — xb_dia","text":"","code":"xb_dia(X, y, tune = FALSE, cv_folds = 5)"},{"path":"https://XIAOJIE0519.github.io/E2E/reference/xb_dia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an XGBoost Tree Model for Classification — xb_dia","text":"X data frame features. y factor vector class labels. tune Logical, whether perform hyperparameter tuning using caret's default grid (TRUE) use fixed values (FALSE). cv_folds integer, number cross-validation folds caret.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/xb_dia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an XGBoost Tree Model for Classification — xb_dia","text":"caret::train object representing trained XGBoost model.","code":""},{"path":"https://XIAOJIE0519.github.io/E2E/reference/xb_dia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an XGBoost Tree Model for Classification — xb_dia","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `prepared_data` from load_and_prepare_data_dia example # xb_model <- xb_dia(prepared_data$X, prepared_data$y) # print(xb_model) } # }"}]
