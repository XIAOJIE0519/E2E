usethis::use_r("Diagnosis Model Components")
usethis::use_r("Diagnosis")
usethis::use_r("Prognosis")
usethis::use_r("Figure")
usethis::use_r("assist")
usethis::use_r("diagnosis")
usethis::use_r("prognosis")
usethis::use_r("figure")
devtools::document()
pkgload::dev_help('register_model_dia')
use_mit_license()
devtools::document()
usethis::use_mit_license()
usethis::use_package("readr")
usethis::use_package("dplyr")
usethis::use_package("caret")
usethis::use_package("pROC")
usethis::use_package("PRROC")
usethis::use_package("glmnet")
usethis::use_package("MASS")
usethis::use_package("gbm")
usethis::use_package("survival")
usethis::use_package("survcomp")
usethis::use_package("survivalROC")
usethis::use_package("randomForestSRC")
usethis::use_package("xgboost")
usethis::use_package("ggplot2")
usethis::use_package("survminer")
usethis::use_package("patchwork")
usethis::use_package("shapviz")
usethis::use_package("Cairo") # 用于高质量图形输出
# 推荐依赖 (Suggests)
# 这些包不是核心功能必需的，但提供了额外的模型选择或美化功能
usethis::use_package("randomForest", type = "Suggests")
usethis::use_package("ada", type = "Suggests")
usethis::use_package("e1071", type = "Suggests")
usethis::use_package("nnet", type = "Suggests")
usethis::use_package("klaR", type = "Suggests")
usethis::use_package("rpart", type = "Suggests")
usethis::use_package("RColorBrewer", type = "Suggests") # 虽然你代码中未直接调用，但其通常用于绘图调色
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("magrittr")
devtools::document()
devtools::document()
library(E2E)
library(E2E)
devtools::document()
library(E2E)
library(usethis, lib.loc = "E:/R-4.4.2/library")
usethis::edit_r_environ()
library(E2E)
library(usethis, lib.loc = "E:/R-4.4.2/library")
usethis::use_data(train_dia, test_dia, train_pro, test_pro, overwrite = TRUE)
train_dia <- read.csv("train_dia.csv")
test_dia <- read.csv("test_dia.csv")
train_pro <- read.csv("train_pro.csv")
test_pro <- read.csv("test_pro.csv")
View(test_dia)
usethis::use_data(train_dia, test_dia, train_pro, test_pro, overwrite = TRUE)
data(train_dia)
View(test_pro)
devtools::document()
devtools::document()
devtools::document()
usethis::edit_r_environ()
library(usethis, lib.loc = "E:/R-4.4.2/library")
devtools::document()
devtools::document()
usethis::edit_r_environ()
devtools::document()
devtools::document()
devtools::document()
usethis::edit_r_environ()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(E2E)
LOAD
load(data_dia)
load(train_dia)
train_dia
devtools::document()
library(E2E)
initialize_modeling_system_dia()
results_dia <- models_dia(train_dia, label_col_name = "outcome",
model = c("rf", "lasso", "xb"), tune = FALSE)
results_dia <- models_dia(train_dia,
model = c("rf", "lasso", "xb"), tune = FALSE)
print_model_summary_dia("rf", results_dia$rf) # View specific model summary
results_all_dia <- models_dia(train_dia, label_col_name = "outcome",
model = "all_dia", tune = FALSE)
results_all_dia <- models_dia(train_dia,
model = "all_dia", tune = FALSE)
for (m_name in names(results_all_dia)) print_model_summary_dia(m_name, results_all_dia[[m_name]])
View(results_all_dia)
data <- train_dia
results_all_dia <- models_dia(data,
model = "all_dia", tune = FALSE)
for (m_name in names(results_all_dia)) print_model_summary_dia(m_name, results_all_dia[[m_name]])
results_imbalance_dia <- imbalance_dia(train_dia,
base_model_name = "xb", n_estimators = 10,
tune_base_model = FALSE, threshold_choices = "f1",
positive_label_value = 1, negative_label_value = 0,
new_positive_label = "Positive",
new_negative_label = "Negative")
print_model_summary_dia("Imbalance (XGBoost)", results_imbalance_dia)
results_pro <- models_pro(train_pro, outcome_col_name = "outcome",
time_col_name = "time", model = c("lasso_pro", "rsf_pro"))
results_pro <- models_pro(train_pro, model = c("lasso_pro", "rsf_pro"))
print_model_summary_pro("lasso_pro", results_pro$lasso_pro)
results_pro <- models_pro(train_pro, model = all_pro)
print_model_summary_pro("lasso_pro", results_pro$lasso_pro)
remove.packages("E2E")
install.packages("C:/Users/Lenovo/Desktop/paper/1A机器学习R包/E2E_0.0.1.tar.gz", repos = NULL, type = "source")
detach("package:E2E")
install.packages("C:/Users/Lenovo/Desktop/paper/1A机器学习R包/E2E_0.0.1.tar.gz", repos = NULL, type = "source")
library(E2E)
results_pro <- models_pro(data_path = "train_pro.csv", outcome_col_name = "outcome",
time_col_name = "time", model = c("lasso_pro", "rsf_pro"))
detach("package:E2E", unload = TRUE)
remove.packages("E2E")
install.packages("C:/Users/Lenovo/Desktop/paper/1A机器学习R包/E2E_0.0.2.tar.gz", repos = NULL, type = "source")
library(E2E)
initialize_modeling_system_pro()
results_pro <- models_pro(train_pro, outcome_col_name = "outcome",
time_col_name = "time", model = c("lasso_pro", "rsf_pro"))
results_pro <- models_pro(train_pro, model = c("lasso_pro", "rsf_pro"))
print_model_summary_pro("lasso_pro", results_pro$lasso_pro)
bagging_gbm_pro_results <- bagging_pro(train_pro,
base_model_name = "gbm_pro", n_estimators = 5)
View(bagging_gbm_pro_results)
figure_shap(model = bagging_gbm_pro_results, data = train,
output_file = "Pro_SHAP_Example", model_type = "xgboost",
output_type = "pdf", target_type = "prognosis")
figure_shap(model = bagging_gbm_pro_results, data = train_pro,
output_file = "Pro_SHAP_Example", model_type = "xgboost",
output_type = "pdf", target_type = "prognosis")
train_pro
View(bagging_gbm_pro_results)
bagging_gbm_pro_results[["model_object"]][["base_model_objects"]][[1]][["X_train_cols"]]
figure_shap(model = bagging_gbm_pro_results, data = train_pro,
output_file = "Pro_SHAP_Example", model_type = "xgboost",
output_type = "pdf", target_type = "prognosis")
remove.packages("E2E")
devtools::document()
devtools::document()
usethis::use_package("timeROC")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_package("survival")
usethis::use_package("survcomp")
usethis::use_package("survival")
usethis::use_package("survivalROC")
usethis::use_package("timeROC")
usethis::use_package("randomForestSRC")
usethis::use_package("xgboost")
usethis::use_package("ggplot2")
devtools::document()
devtools::document()
