% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnosis.R
\name{apply_model_to_new_data_dia}
\alias{apply_model_to_new_data_dia}
\title{Apply a Trained Diagnostic Model to New Data}
\usage{
apply_model_to_new_data_dia(
  trained_model_object,
  new_data_path,
  label_col_name = NULL,
  pos_class,
  neg_class,
  positive_label_value = 1,
  negative_label_value = 0
)
}
\arguments{
\item{trained_model_object}{A trained model object, as returned by \code{run_models_dia()},
\code{bagging_dia()}, \code{stacking_dia()}, \code{voting_dia()}, or \code{imbalance_dia()}.}

\item{new_data_path}{A character string, the file path to the new CSV data
for prediction.}

\item{label_col_name}{A character string, the name of the column containing
the class labels in the new data. This column is optional and only used
to include the true labels in the output data frame if available, not for prediction.}

\item{pos_class}{A character string, the label for the positive class (must
match the label used during training).}

\item{neg_class}{A character string, the label for the negative class (must
match the label used during training).}

\item{positive_label_value}{A numeric or character value that represents
the positive class in the raw new data. Used for \code{label_col_name} mapping.}

\item{negative_label_value}{A numeric or character value that represents
the negative class in the raw new data. Used for \code{label_col_name} mapping.}
}
\value{
A data frame with \code{sample} (ID), \code{label} (original numeric label from new data, or NA if not provided),
and \code{score} (predicted probability for the positive class).
}
\description{
Applies a previously trained diagnostic model (or ensemble) to a
new, unseen dataset to generate predicted probabilities for the positive class.
}
\examples{
\dontrun{
# 1. Create dummy training data and new data
set.seed(123)
dummy_train_data <- data.frame(
  ID = paste0("Train", 1:100),
  FeatureA = rnorm(100),
  FeatureB = runif(100, 0, 100),
  Disease_Status = sample(c(0, 1), 100, replace = TRUE)
)
write.csv(dummy_train_data, "dummy_diagnosis_train_data.csv", row.names = FALSE)

dummy_new_data <- data.frame(
  ID = paste0("Test", 1:20),
  FeatureA = rnorm(20),
  FeatureB = runif(20, 0, 100),
  Disease_Status = sample(c(0, 1), 20, replace = TRUE) # Include for data prep
)
write.csv(dummy_new_data, "dummy_diagnosis_new_data.csv", row.names = FALSE)

# 2. Initialize the modeling system
initialize_modeling_system_dia()

# 3. Train a model (e.g., Lasso) on training data
# train_results <- run_models_dia(
#   data_path = "dummy_diagnosis_train_data.csv",
#   label_col_name = "Disease_Status",
#   model = "lasso",
#   positive_label_value = 1,
#   negative_label_value = 0,
#   new_positive_label = "Case",
#   new_negative_label = "Control"
# )
# trained_lasso_model <- train_results$lasso$model_object

# 4. Apply the trained model to new data
# new_data_predictions <- apply_model_to_new_data_dia(
#   trained_model_object = trained_lasso_model,
#   new_data_path = "dummy_diagnosis_new_data.csv",
#   label_col_name = "Disease_Status", # Optional for new data if labels are not present
#   pos_class = "Case",
#   neg_class = "Control",
#   positive_label_value = 1,
#   negative_label_value = 0
# )
# utils::head(new_data_predictions)

# 5. Clean up
# unlink("dummy_diagnosis_train_data.csv")
# unlink("dummy_diagnosis_new_data.csv")
}
}
