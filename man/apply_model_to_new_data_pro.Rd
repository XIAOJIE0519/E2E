% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prognosis.R
\name{apply_model_to_new_data_pro}
\alias{apply_model_to_new_data_pro}
\title{Apply a Trained Prognostic Model to New Data}
\usage{
apply_model_to_new_data_pro(
  trained_model_object,
  new_data_path,
  outcome_col_name = "outcome",
  time_col_name = "time",
  time_unit = "day"
)
}
\arguments{
\item{trained_model_object}{A trained model object, as returned by \code{run_models_pro()},
\code{bagging_pro()}, or \code{stacking_pro()}.}

\item{new_data_path}{A character string, the file path to the new CSV data
for prediction.}

\item{outcome_col_name}{A character string, the name of the column containing
event status (0 for censored, 1 for event) in the new data. Used for data
preparation, but not for prediction by the model itself.}

\item{time_col_name}{A character string, the name of the column containing
event or censoring time in the new data. Used for data preparation.}

\item{time_unit}{A character string, the unit of time in \code{time_col_name} of
the new data.}
}
\value{
A data frame with \code{ID}, \code{outcome}, \code{time}, and \code{score} for the new data.
\code{score} represents the predicted prognostic score from the model.
}
\description{
Applies a previously trained prognostic model (or ensemble) to a
new, unseen dataset to generate prognostic scores.
}
\examples{
\dontrun{
# 1. Create dummy training data and new data
set.seed(123)
dummy_train_data <- data.frame(
  ID = paste0("Train", 1:100),
  FeatureA = rnorm(100),
  FeatureB = runif(100, 0, 100),
  Outcome_Status = sample(c(0, 1), 100, replace = TRUE),
  Followup_Time_Days = runif(100, 100, 2000)
)
write.csv(dummy_train_data, "dummy_prognosis_train_data.csv", row.names = FALSE)

dummy_new_data <- data.frame(
  ID = paste0("Test", 1:20),
  FeatureA = rnorm(20),
  FeatureB = runif(20, 0, 100),
  Outcome_Status = sample(c(0, 1), 20, replace = TRUE), # Include for data prep
  Followup_Time_Days = runif(20, 50, 1500)             # Include for data prep
)
write.csv(dummy_new_data, "dummy_prognosis_new_data.csv", row.names = FALSE)

# 2. Initialize the modeling system
initialize_modeling_system_pro()

# 3. Train a model (e.g., Lasso) on training data
# train_results <- run_models_pro(
#   data_path = "dummy_prognosis_train_data.csv",
#   outcome_col_name = "Outcome_Status",
#   time_col_name = "Followup_Time_Days",
#   model = "lasso_pro"
# )
# trained_lasso_model <- train_results$lasso_pro$model_object

# 4. Apply the trained model to new data
# new_data_predictions <- apply_model_to_new_data_pro(
#   trained_model_object = trained_lasso_model,
#   new_data_path = "dummy_prognosis_new_data.csv",
#   outcome_col_name = "Outcome_Status",
#   time_col_name = "Followup_Time_Days"
# )
# utils::head(new_data_predictions)

# 5. Clean up
# unlink("dummy_prognosis_train_data.csv")
# unlink("dummy_prognosis_new_data.csv")
}
}
\seealso{
\code{\link{load_and_prepare_data_pro}}, \code{\link{evaluate_model_pro}}
}
